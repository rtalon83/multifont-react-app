{"version":3,"sources":["utils/Observer.js","components/header/Header.js","components/main/TextureView.js","components/main/Tester.js","components/main/Viewer.js","utils/ImagesLoader.js","components/main/atlas/AtlasItems.js","components/main/atlas/AtlasList.js","utils/packing/packers/Packer.js","utils/packing/packers/MaxRectsPacker.js","utils/packing/packers/math/Rect.js","utils/packing/packers/MaxRectsBin.js","utils/packing/packers/OptimalPacker.js","utils/packing/packers/index.js","model/constants/background.js","utils/connection/ajax.js","utils/exporter/Parser.js","utils/exporter/Export.js","components/main/Properties.js","utils/SpriteSplitter.js","model/Character.js","model/BitmapFontData.js","utils/packing/Trimmer.js","utils/TextureRenderer.js","utils/packing/PackProcessor.js","App.js","index.js"],"names":["EVENT","Observer","EventEmitter","Header","className","src","alt","Component","TextureView","props","onViewClick","bind","this","updateView","view","ReactDOM","findDOMNode","refs","width","buffer","height","style","Math","floor","scale","ctx","getContext","clearRect","selectedChar","globalAlpha","drawImage","fontId","bitmapfonts","hasOwnProperty","fontData","characters","charData","frame","w","h","rotated","x","y","beginPath","rect","stroke","textureBack","item","strokeStyle","fillStyle","lineWidth","fillRect","moveTo","lineTo","charFound","charId","event","selectedFont","getBoundingClientRect","clientX","left","clientY","top","multifont","charClicked","getCharByClick","emit","preventDefault","stopPropagation","ref","onClick","React","Tester","_testMessage","updateResult","on","selectedfont","canvas","canvasTextResult","currentTarget","value","i","charsToShow","split","len","length","fromX","fromY","lineHeight","spaceWidth","tabWidth","getCharByText","xoffset","yoffset","image","xadvance","onChange","Viewer","onFontSelected","onCharSelected","onCharChanged","onChangeBackgroundTexture","blurHandler","state","packResult","updateViewer","data","setState","getCharById","text","views","ix","input","push","key","maxLength","id","defaultValue","autoFocus","onBlur","tabIndex","TYPES","ImagesLoader","_data","_images","onEnd","checkDone","callBack","loadNext","shift","indexOf","type","img","Image","reader","FileReader","onload","target","result","_base64","name","readAsDataURL","ready","Object","keys","complete","setTimeout","AtlasItems","onSelect","_divSelected","it_0","list","map","index","AtlasList","onFilesDrop","onDragOver","onLoadImagesComplete","atlas","dataTransfer","files","load","names","dropHelp","onDrop","METHOD","Default","Packer","Error","description","Smart","SmartArea","Square","SquareArea","SmartSquare","SmartSquareArea","MaxRectsPacker","allowRotate","binWidth","binHeight","method","options","smart","pot","square","allowRotation","logic","PACKING_LOGIC","MAX_EDGE","MAX_AREA","packer","MaxRectsPackerEngine","addArray","rects","bins","res","rot","Rect","other","hitTest","a","b","BestShortSideFit","BestLongSideFit","BestAreaFit","BottomLeftRule","ContactPointRule","MaxRectsBin","usedRectangles","freeRectangles","insert2","newNode","score1","score2","_findPositionForNewNodeBestShortSideFit","_findPositionForNewNodeBottomLeft","_findPositionForNewNodeContactPoint","_findPositionForNewNodeBestLongSideFit","_findPositionForNewNodeBestAreaFit","_placeRectangle","rectangles","bestScore1","Infinity","bestScore2","bestRectangleIndex","bestNode","_scoreRectangle","splice","node","numRectanglesToProcess","_splitFreeNode","_pruneFreeList","usedSurfaceArea","bestY","bestX","topSideY","bestShortSideFit","bestLongSideFit","leftoverHoriz","leftoverVert","shortSideFit","longSideFit","abs","min","max","flippedLeftoverHoriz","flippedLeftoverVert","flippedShortSideFit","flippedLongSideFit","bestAreaFit","areaFit","i1start","i1end","i2start","i2end","score","_commonIntervalLength","bestContactScore","_contactPointScoreNode","freeNode","usedNode","clone","j","Automatic","OptimalPacker","getPackerByType","TEXTURES_BACKGROUND","createHTTPQuery","params","query","encodeURIComponent","join","createXMLHTTPRequest","url","callback","errorCallback","dataType","xmlhttp","window","XMLHttpRequest","onreadystatechange","readyState","status","response","responseXML","responseText","statusText","send","open","responseType","setRequestHeader","SPECIAL_CHAR","CODE","ID","Parser","parsed","code","letter","size","textureName","textureFormat","chars","parseChar","fontParsed","Exporter","packOptions","mtsFile","exporter","template","multiFont","parseFont","parseMultiFont","results","loadTemplate","imageData","toDataURL","parts","content","base64","zip","JSZip","file","generateAsync","then","FileSaver","saveAs","fileName","Promise","resolve","reject","GET","renderTemplate","mustache","render","e","message","Properties","changeTab","toggleChange","onFontPropChanged","onPackerChange","startExport","setBack","onToggleSwitchChange","onExporterChanged","onDimChanged","methodItems","setPackDefault","updatePackerMethods","multiTexture","getExporterByType","disabled","allowTrim","trimmode","toggleSwitch","allowMultiFont","allowOneFont","checked","emitChanges","updateFontProps","bmpfSelected","monoSpace","monospace","asciiCode","xOffSet","yOffSet","xAdvance","assign","fixedSize","powerOfTwo","trimMode","detectIdentical","packers","packerMethod","methods","document","getElementById","click","tab_font","display","tab_properties","tab_button_pack","refTabButtonFont","tab_button_font","replace","refTabButtonPack","currentPacker","Number","setCharMonospace","classNames","keyCode","which","onKeyDown","defaultChecked","Textures","readOnly","SpriteSplitter","_listSelections","_img","_rawData","_refPixel","_fontName","_auxCanvas","createElement","fontName","getImageData","getPixel","next","selectFrameAt","firstPixel","findNextStartPixel","isFinalPixel","selection","selectFrame","uuidv4","imagedata","expandFromPixel","isFinished","expandFromAllDirections","offset","expandToTheRight","expandToTheBottom","expandToTheLeft","expandToTheTop","isLineEmptyToTheTop","xToCheck","yToCheck","isEmptyPixel","isLineEmptyToTheLeft","isLineEmptyToTheRight","isLineEmptyToTheBottom","red","green","blue","alpha","targetPixel","searchPixel","pixel","undefined","maxX","isPixelInSelections","selections","findSelectionOfPixel","filter","minX","minY","maxY","Character","_text","_code","_frame","_sourceSize","_spriteSourceSize","_image","_rotated","_xoffset","_yoffset","_xadvance","charCodeAt","BitmapFontData","_name","slice","_fileName","_size","_lineHeight","_spaceWidth","_tabWidth","_monospace","_monospaceValue","_characters","chara","maxWidth","maxHeight","Trimmer","threshold","getAlpha","cns","spaces","right","bottom","getLeftSpace","getRightSpace","getTopSpace","getBottomSpace","trimmed","spriteSourceSize","TextureRenderer","_buffer","imageSmoothingEnabled","disableSmoothing","getSize","renderItem","val","tempBuffer","round","extrude","dx","dy","sourceSize","skipRender","save","translate","rotate","PI","renderExtrude","restore","padding","sw","log","sh","pw","pow","ph","PackProcessor","identical","rect1","n","rect2","clones","removeIdentical","originalFile","cloned","images","onComplete","onError","minWidth","minHeight","alphaThreshold","sort","console","error","trim","optimalRes","getAllPackers","allPackers","packerClass","MaxRectsBinPack","packerCombos","optimalSheets","optimalEfficiency","sourceArea","combo","sheetArea","_rects","_identical","pack","applyIdentical","removeRect","sheets","efficiency","App","onAtlasListChanged","onCharImageLoaded","onPackOptionsChanged","_bitmapFonts","_packResult","_packCharas","_packOptions","_spriteSplitter","_totalCharasToLoad","_numCharasLoaded","_selectedFont","getImageCharas","doPack","listCharas","charas","concat","auxCanvas","auxCtx","putImageData","addEventListener","_id","removeEventListener","renderer","updateBitmapFonts","startExporter"],"mappings":"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","file":"static/js/main.a84de69c.chunk.js","sourcesContent":["import EventEmitter from \"eventemitter3\";\r\n\r\nconst EVENT = {\r\n    ATLAS_LIST_CHANGED: 'ATLAS_LIST_CHANGED',\r\n    PACK_COMPLETED: 'PACK_COMPLETED',\r\n    PACK_OPTIONS_CHANGED: 'PACK_OPTIONS_CHANGED',\r\n    MULTIFONT_ACTIVATED: 'MULTIFONT_ACTIVATED',\r\n    START_EXPORT: 'START_EXPORT',\r\n    EXPORT_COMPLETED: 'EXPORT_COMPLETED',\r\n    FONT_SELECTED: 'FONT_SELECTED',\r\n    CHAR_SELECTED: 'CHAR_SELECTED',\r\n    CHAR_CHANGED: 'CHAR_CHANGED',\r\n    UPDATE_RESULT: 'UPDATE_RESULT',\r\n    BACKGROUND_TEXTURE_CHANGED: 'BACKGROUND_TEXTURE_CHANGED'\r\n};\r\n\r\nconst Observer = new EventEmitter();\r\n\r\nexport {\r\n    Observer,\r\n    EVENT\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport '../../styles/header.css';\r\n\r\nclass Header extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"header-title\">\r\n                    <img src=\"images/logo_app.png\" alt=\"logo\"/>\r\n                    <div className=\"title\">MultiFont Packer BETA 0.1.3</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {EVENT, Observer} from \"../../utils/Observer\";\r\n\r\nimport '../../styles/viewer.css';\r\n\r\nclass TextureView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onViewClick = this.onViewClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateView();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updateView();\r\n    }\r\n\r\n    updateView() {\r\n        let view = ReactDOM.findDOMNode(this.refs.view);\r\n        if (view) {\r\n            view.width = this.props.buffer.width;\r\n            view.height = this.props.buffer.height;\r\n\r\n            view.style.width = Math.floor(view.width * this.props.scale) + \"px\";\r\n            view.style.height = Math.floor(view.height * this.props.scale) + \"px\";\r\n\r\n            let ctx = view.getContext(\"2d\");\r\n\r\n            ctx.clearRect(0, 0, view.width, view.height);\r\n            // ctx.rect(0, 0, view.width, view.height);\r\n            // ctx.fillStyle = 'red';\r\n            // ctx.fill();\r\n\r\n            if (this.props.selectedChar) {\r\n                ctx.globalAlpha = 0.35;\r\n            }\r\n\r\n            ctx.drawImage(this.props.buffer, 0, 0, view.width, view.height, 0, 0, view.width, view.height);\r\n\r\n            // if(this.props.displayOutline) {\r\n            //     for (let item of this.props.data.data) {\r\n            //         if(!item.cloned) {\r\n            //             this.drawOutline(ctx, item);\r\n            //         }\r\n            //     }\r\n            // }\r\n\r\n            ctx.globalAlpha = 1;\r\n\r\n            if (this.props.selectedChar) {\r\n                for (const fontId in this.props.bitmapfonts) {\r\n                    if (this.props.bitmapfonts.hasOwnProperty(fontId)) {\r\n                        const fontData = this.props.bitmapfonts[fontId];\r\n\r\n                        if (fontData.characters.hasOwnProperty(this.props.selectedChar)) {\r\n                            const charData = fontData.characters[this.props.selectedChar];\r\n\r\n                            let frame = charData.frame;\r\n\r\n                            let w = frame.w, h = frame.h;\r\n                            if (charData.rotated) {\r\n                                w = frame.h;\r\n                                h = frame.w;\r\n                            }\r\n\r\n                            ctx.clearRect(frame.x, frame.y, w, h);\r\n                            ctx.drawImage(this.props.buffer, frame.x, frame.y, w, h, frame.x, frame.y, w, h);\r\n\r\n                            //if(this.props.displayOutline) this.drawOutline(ctx, item);\r\n\r\n                            ctx.beginPath();\r\n\r\n                            //if(ctx.setLineDash) ctx.setLineDash([4, 2]);\r\n                            //ctx.strokeStyle = \"#000\";\r\n                            //ctx.lineWidth = 2;\r\n                            ctx.rect(frame.x, frame.y, w, h);\r\n\r\n                            ctx.stroke();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            view.className = this.props.textureBack;\r\n        }\r\n    }\r\n\r\n    drawOutline(ctx, item) {\r\n        let frame = item.frame;\r\n        let w = frame.w, h = frame.h;\r\n        if (item.rotated) {\r\n            w = frame.h;\r\n            h = frame.w;\r\n        }\r\n\r\n        ctx.strokeStyle = \"#00F\";\r\n        ctx.fillStyle = \"rgba(0,0,255,0.25)\";\r\n        ctx.lineWidth = 1;\r\n\r\n        ctx.beginPath();\r\n        ctx.fillRect(frame.x, frame.y, w, h);\r\n        ctx.rect(frame.x, frame.y, w, h);\r\n        ctx.moveTo(frame.x, frame.y);\r\n        ctx.lineTo(frame.x + w, frame.y + h);\r\n        ctx.stroke();\r\n    }\r\n\r\n    getCharByClick(fontData, x, y) {\r\n        let charFound = null;\r\n\r\n        for (const charId in fontData.characters) {\r\n            if (fontData.characters.hasOwnProperty(charId)) {\r\n                const charData = fontData.characters[charId];\r\n\r\n                let w = charData.frame.w;\r\n                let h = charData.frame.h;\r\n                if (charData.rotated) {\r\n                    w = charData.frame.h;\r\n                    h = charData.frame.w;\r\n                }\r\n\r\n                if (x >= charData.frame.x && x < charData.frame.x + w && y >= charData.frame.y && y < charData.frame.y + h) {\r\n                    charFound = charId;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return charFound;\r\n    }\r\n\r\n    onViewClick(event) {\r\n        let selectedChar = null;\r\n        let selectedFont = this.props.selectedFont;\r\n\r\n        const canvas = ReactDOM.findDOMNode(this.refs.view);\r\n        const rect = canvas.getBoundingClientRect();\r\n        const x = (event.clientX - rect.left) / this.props.scale;\r\n        const y = (event.clientY - rect.top) / this.props.scale;\r\n\r\n        // multifont mode, search in every fonts\r\n        if (this.props.multifont) {\r\n            for (const fontId in this.props.bitmapfonts) {\r\n                if (this.props.bitmapfonts.hasOwnProperty(fontId)) {\r\n                    let charClicked = this.getCharByClick(this.props.bitmapfonts[fontId], x, y);\r\n                    if (charClicked) {\r\n                        selectedChar = charClicked;\r\n                        selectedFont = fontId;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else { // simple font, search in a font\r\n            let charClicked = this.getCharByClick(this.props.bitmapfonts[this.props.selectedFont], x, y);\r\n            if (charClicked) {\r\n                selectedChar = charClicked;\r\n                selectedFont = this.props.selectedFont;\r\n            }\r\n        }\r\n\r\n        if (selectedChar) {\r\n            this.updateView();\r\n\r\n            Observer.emit(EVENT.CHAR_SELECTED, {\r\n                selectedChar: selectedChar,\r\n                selectedFont: selectedFont\r\n            });\r\n        }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref=\"back\">\r\n                <canvas ref=\"view\" onClick={this.onViewClick}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextureView;\r\n","import React, {Component} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {EVENT, Observer} from \"../../utils/Observer\";\r\n\r\nclass Tester extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Test message to show\r\n        this._testMessage = '';\r\n\r\n        // Bind\r\n        this.updateResult = this.updateResult.bind(this);\r\n\r\n        // Listeners\r\n        Observer.on(EVENT.UPDATE_RESULT, this.updateResult);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updateResult();\r\n    }\r\n\r\n    updateResult(event = null) {\r\n        if (this.props.selectedfont == null) {\r\n            return;\r\n        }\r\n\r\n        if (this.props.bitmapfonts.hasOwnProperty(this.props.selectedfont)) {\r\n            const fontData = this.props.bitmapfonts[this.props.selectedfont];\r\n\r\n            // ToDo, Array.from() IE 11 problem\r\n\r\n            let canvas = ReactDOM.findDOMNode(this.refs.canvasTextResult);\r\n            let ctx = canvas.getContext(\"2d\");\r\n\r\n            canvas.width = 1280;\r\n            canvas.height = 768;\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n            if (event) {\r\n                this._testMessage = event.currentTarget.value;\r\n            }\r\n\r\n            const charsToShow = this._testMessage.split('');\r\n            const len = charsToShow.length;\r\n            let i;\r\n            let fromX = 0;\r\n            let fromY = 0;\r\n\r\n            for (i = 0; i < len; i++) {\r\n                if (charsToShow[i] === \"\\n\") {\r\n                    fromY += this.props.bitmapfonts[this.props.selectedfont].lineHeight;\r\n                    fromX = 0;\r\n                }\r\n                else if (charsToShow[i] === \" \") {\r\n                    fromX += this.props.bitmapfonts[this.props.selectedfont].spaceWidth;\r\n                }\r\n                else if (charsToShow[i] === \"\\r\") {\r\n                    fromX += this.props.bitmapfonts[this.props.selectedfont].tabWidth;\r\n                }\r\n                else {\r\n                    const charData = fontData.getCharByText(charsToShow[i]);\r\n\r\n                    if (charData) {\r\n                        const xoffset = fromX + charData.xoffset;\r\n                        const yoffset = fromY + charData.yoffset;\r\n\r\n                        ctx.drawImage(charData.image, xoffset, yoffset);\r\n                        fromX += charData.xadvance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"viewer-tester\">\r\n                <div className=\"tester-text\">\r\n                    <div className=\"tester-text-info\">Write here</div>\r\n                    <textarea className=\"text-area\" ref=\"text_area\" onChange={this.updateResult}/>\r\n                </div>\r\n                <div className=\"tester-view\">\r\n                    <div className=\"tester-text-info\">Background</div>\r\n                    <div className=\"canvas-text-result\">\r\n                        <canvas ref=\"canvasTextResult\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tester;\r\n","import React, {Component} from 'react';\r\nimport {EVENT, Observer} from \"../../utils/Observer\";\r\nimport TextureView from \"./TextureView\";\r\nimport Tester from \"./Tester\";\r\n\r\nimport '../../styles/viewer.css';\r\n\r\nclass Viewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onFontSelected = this.onFontSelected.bind(this);\r\n        this.onCharSelected = this.onCharSelected.bind(this);\r\n        this.onCharChanged = this.onCharChanged.bind(this);\r\n        this.onChangeBackgroundTexture = this.onChangeBackgroundTexture.bind(this);\r\n        this.blurHandler = this.blurHandler.bind(this);\r\n\r\n        this.state = {\r\n            textureBack: 'grid-texture',\r\n            packResult: null,\r\n            selectedChar: null,\r\n            selectedFont: null\r\n        };\r\n\r\n        Observer.on(EVENT.FONT_SELECTED, this.onFontSelected);\r\n        Observer.on(EVENT.CHAR_SELECTED, this.onCharSelected);\r\n        Observer.on(EVENT.PACK_COMPLETED, this.updateViewer, this);\r\n        Observer.on(EVENT.BACKGROUND_TEXTURE_CHANGED, this.onChangeBackgroundTexture);\r\n    }\r\n\r\n    onChangeBackgroundTexture(data) {\r\n        this.setState({\r\n            textureBack: data\r\n        });\r\n    }\r\n\r\n    onCharSelected(data) {\r\n        this.setState({\r\n            selectedChar: data.selectedChar,\r\n            selectedFont: data.selectedFont\r\n        });\r\n    }\r\n\r\n    onCharChanged(data) {\r\n        const charData = this.props.bitmapfonts[this.state.selectedFont].getCharById(this.state.selectedChar);\r\n        if (charData) {\r\n            charData.text = data.currentTarget.value;\r\n        }\r\n\r\n        Observer.emit(EVENT.CHAR_SELECTED, {\r\n            selectedChar: this.state.selectedChar,\r\n            selectedFont: this.state.selectedFont\r\n        });\r\n    }\r\n\r\n    onFontSelected(data) {\r\n        this.setState({\r\n            selectedFont: data.selectedFont,\r\n            selectedChar: null\r\n        });\r\n    }\r\n\r\n    updateViewer(data) {\r\n        if (!this.state.selectedFont) {\r\n            this.state.selectedFont = data[0].selectedFont;\r\n        }\r\n\r\n        this.state.selectedChar = null;\r\n        this.setState({packResult: data});\r\n    }\r\n\r\n    blurHandler() {\r\n        this.setState({\r\n            selectedChar: null\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let views = [], ix = 0;\r\n        let input = [];\r\n\r\n        if (this.state.packResult) {\r\n            for (let item of this.state.packResult) {\r\n                views.push((\r\n                    <TextureView key={\"tex-view-\" + ix}\r\n                                 buffer={item.buffer}\r\n                                 textureBack={this.state.textureBack}\r\n                                 bitmapfonts={this.props.bitmapfonts}\r\n                                 scale={1.0}\r\n                                 multifont={item.multifont}\r\n                                 selectedChar={this.state.selectedChar}\r\n                                 selectedFont={this.state.selectedFont}/>\r\n                ));\r\n\r\n                ix++;\r\n            }\r\n        }\r\n\r\n        if (this.state.selectedChar) {\r\n            for (const fontId in this.props.bitmapfonts) {\r\n                if (this.props.bitmapfonts.hasOwnProperty(fontId)) {\r\n                    const charData = this.props.bitmapfonts[fontId].getCharById(this.state.selectedChar);\r\n\r\n                    if (charData) {\r\n                        input.push(<input\r\n                            onChange={this.onCharChanged}\r\n                            key={\"id\" + this.state.selectedChar}\r\n                            maxLength=\"1\"\r\n                            id={this.state.selectedChar}\r\n                            defaultValue={charData.text}\r\n                            autoFocus={true}\r\n                            className=\"input-letter\"\r\n                            style={\r\n                                {\r\n                                    left: charData.frame.x,\r\n                                    top: charData.frame.y,\r\n                                }\r\n                            }/>);\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"viewer-main\">\r\n                <div className=\"viewer\">\r\n                    <div className=\"result-view-container\">\r\n                        <div className=\"viewer-texture\">\r\n                            <div className=\"viewer-input\" onBlur={this.blurHandler} tabIndex={0}>\r\n                                {input}\r\n                            </div>\r\n                            {views}\r\n                        </div>\r\n                    </div>\r\n                    <Tester bitmapfonts={this.props.bitmapfonts} selectedfont={this.state.selectedFont}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Viewer;\r\n","const TYPES = [\"image/png\", \"image/jpg\", \"image/jpeg\", \"image/gif\"];\r\n\r\nexport class ImagesLoader {\r\n    constructor() {\r\n        this._data = null;\r\n\r\n        this._images = {};\r\n\r\n        // Bind\r\n        this.onEnd = null;\r\n        this.checkDone = this.checkDone.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @param {FileList} data\r\n     * @param {Function} callBack\r\n     */\r\n    load(data, callBack) {\r\n        let i;\r\n        const len = data.length;\r\n\r\n        this._data = [];\r\n\r\n        for (i = 0; i < len; i++) {\r\n            this._data.push(data[i]);\r\n        }\r\n\r\n        this.onEnd = callBack;\r\n        this.loadNext();\r\n    }\r\n\r\n    loadNext() {\r\n        if (this._data.length > 0) {\r\n            let item = this._data.shift();\r\n\r\n            if (TYPES.indexOf(item.type) !== -1) {\r\n                let img = new Image();\r\n\r\n                let reader = new FileReader();\r\n                reader.onload = event => {\r\n                    img.src = event.target.result;\r\n                    img._base64 = event.target.result;\r\n\r\n                    this._images[item.name] = img;\r\n                    this.loadNext();\r\n                };\r\n\r\n                reader.readAsDataURL(item);\r\n            }\r\n            else {\r\n                this.loadNext();\r\n            }\r\n        }\r\n        else {\r\n            this.checkDone();\r\n        }\r\n    }\r\n\r\n    checkDone() {\r\n        let ready = true;\r\n\r\n        for (let key of Object.keys(this._images)) {\r\n            if (!this._images[key].complete) {\r\n                ready = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (ready) {\r\n            this.onEnd(this._images);\r\n        }\r\n        else {\r\n            setTimeout(this.checkDone, 50);\r\n        }\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport {EVENT, Observer} from \"../../../utils/Observer\";\r\n\r\nimport '../../../styles/atlasitems.css';\r\n\r\nclass AtlasItems extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Bind\r\n        this.onSelect = this.onSelect.bind(this);\r\n\r\n        this._divSelected = null;\r\n    }\r\n\r\n    onSelect(event) {\r\n        Observer.emit(EVENT.FONT_SELECTED, {\r\n            selectedFont: event.currentTarget.id,\r\n            selectedChar: null\r\n        });\r\n\r\n        event.currentTarget.className = \"item-wrapper\" + \" item-selected\";\r\n\r\n        if ( this._divSelected ) {\r\n            this._divSelected.className = 'item-wrapper';\r\n        }\r\n\r\n        this._divSelected = event.currentTarget;\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if ( this.props.data && this._divSelected == null ) {\r\n            this._divSelected = ReactDOM.findDOMNode(this.refs.it_0);\r\n            this._divSelected.className = 'item-wrapper' + ' item-selected';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const keys = Object.keys(this.props.data);\r\n\r\n        if (keys.length > 0) {\r\n            const list = keys.map((item, index) =>\r\n                <div key={\"id_\" + index} className=\"item-wrapper\" id={item} ref={'it_' + index} onClick={this.onSelect}>\r\n                    <div className=\"item-image-container\">\r\n                        <img className=\"item-image\" alt={'imagen'} src={this.props.data[item].src}/>\r\n                    </div>\r\n                    <div className=\"item-text-container\">{item}</div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <div>\r\n                    {list}\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (<span></span>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default AtlasItems;\r\n","import {EVENT, Observer} from \"../../../utils/Observer\";\r\nimport React, {Component} from 'react';\r\nimport {ImagesLoader} from \"../../../utils/ImagesLoader\";\r\nimport AtlasItems from \"./AtlasItems\";\r\n\r\nimport '../../../styles/atlaslist.css';\r\n\r\nclass AtlasList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Bind\r\n        this.onFilesDrop = this.onFilesDrop.bind(this);\r\n        this.onDragOver = this.onDragOver.bind(this);\r\n        this.onLoadImagesComplete = this.onLoadImagesComplete.bind(this);\r\n\r\n        this.state = {\r\n            atlas: {}\r\n        }\r\n    }\r\n\r\n    onFilesDrop(event) {\r\n        event.preventDefault();\r\n\r\n        if (event.dataTransfer.files.length) {\r\n            const loader = new ImagesLoader();\r\n            loader.load(event.dataTransfer.files, this.onLoadImagesComplete)\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    onDragOver(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onLoadImagesComplete(event) {\r\n        const names = Object.keys(event);\r\n\r\n        if (names.length) {\r\n            let atlas = this.state.atlas;\r\n\r\n            for (const name of names) {\r\n                atlas[name] = event[name];\r\n            }\r\n\r\n            this.setState({\r\n                atlas: atlas\r\n            });\r\n\r\n            Observer.emit(EVENT.ATLAS_LIST_CHANGED, atlas);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropHelp = Object.keys(this.state.atlas).length > 0 ? null : (<div ref=\"dropHelp\" className=\"image-drop-help\">drag'n'drop images here</div>);\r\n\r\n        return (\r\n            <div className=\"atlas-list\" onDrop={this.onFilesDrop} onDragOver={this.onDragOver}>\r\n                <div>\r\n                    <AtlasItems data={this.state.atlas}/>\r\n                    {dropHelp}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AtlasList;\r\n","const METHOD = {\r\n    Default: \"Default\"\r\n};\r\n\r\nclass Packer {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    pack() {\r\n        throw Error(\"Abstarct method. Override it.\");\r\n    }\r\n\r\n\r\n    static get type() {\r\n        return \"Default\";\r\n    }\r\n\r\n    static get methods() {\r\n        return METHOD;\r\n    }\r\n\r\n    static getMethodProps() {\r\n        return {name: \"Default\", description: \"Default placement\"};\r\n    }\r\n}\r\n\r\nexport default Packer;","import Packer from \"./Packer\";\r\nimport {PACKING_LOGIC, MaxRectsPacker as MaxRectsPackerEngine} from 'maxrects-packer';\r\n\r\nconst METHOD = {\r\n    Smart: \"Smart\",\r\n    SmartArea: \"SmartArea\",\r\n    Square: \"Square\",\r\n    SquareArea: \"SquareArea\",\r\n    SmartSquare: \"SmartSquare\",\r\n    SmartSquareArea: \"SmartSquareArea\"\r\n};\r\n\r\nclass MaxRectsPacker extends Packer {\r\n    constructor(width, height, allowRotate=false) {\r\n        super();\r\n\r\n        this.binWidth = width;\r\n        this.binHeight = height;\r\n        this.allowRotate = allowRotate;\r\n    }\r\n\r\n    pack(data, method) {\r\n        let options = {\r\n            smart: (method === METHOD.Smart || method === METHOD.SmartArea || method === METHOD.SmartSquare || method === METHOD.SmartSquareArea),\r\n            pot: false,\r\n            square: (method === METHOD.Square || method === METHOD.SquareArea || method === METHOD.SmartSquare || method === METHOD.SmartSquareArea),\r\n            allowRotation: this.allowRotate,\r\n            logic: (method === METHOD.Smart || method === METHOD.Square || method === METHOD.SmartSquare) ? PACKING_LOGIC.MAX_EDGE : PACKING_LOGIC.MAX_AREA\r\n        };\r\n\r\n        let packer = new MaxRectsPackerEngine(this.binWidth, this.binHeight, 0, options);\r\n\r\n        let input = [];\r\n        \r\n        for(let item of data) {\r\n            input.push({width: item.frame.w, height: item.frame.h, data: item});\r\n        }\r\n\r\n        packer.addArray(input);\r\n        \r\n        let bin = packer.bins[0];\r\n        let rects = bin.rects;\r\n        \r\n        let res = [];\r\n        \r\n        for(let item of rects) {\r\n            item.data.frame.x = item.x;\r\n            item.data.frame.y = item.y;\r\n            if (item.rot) {\r\n                item.data.rotated = true;\r\n            }\r\n            res.push(item.data);\r\n        }\r\n        \r\n        return res;\r\n    }\r\n    \r\n    static get type() {\r\n        return \"MaxRectsPacker\";\r\n    }\r\n\r\n    static get methods() {\r\n        return METHOD;\r\n    }\r\n\r\n    static getMethodProps(id='') {\r\n        switch(id) {\r\n            case METHOD.Smart:\r\n                return {name: \"Smart edge logic\", description: \"\"};\r\n            case METHOD.SmartArea:\r\n                return {name: \"Smart area logic\", description: \"\"};\r\n            case METHOD.Square:\r\n                return {name: \"Square edge logic\", description: \"\"};\r\n            case METHOD.SquareArea:\r\n                return {name: \"Square area logic\", description: \"\"};\r\n            case METHOD.SmartSquare:\r\n                return {name: \"Smart square edge logic\", description: \"\"};\r\n            case METHOD.SmartSquareArea:\r\n                return {name: \"Smart square area logic\", description: \"\"};\r\n            default:\r\n                throw Error(\"Unknown method \" + id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default MaxRectsPacker;\r\n","class Rect {\r\n    constructor(x=0, y=0, width=0, height=0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    clone() {\r\n        return new Rect(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    hitTest(other) {\r\n        return Rect.hitTest(this, other);\r\n    }\r\n\r\n    static hitTest(a, b) {\r\n        return a.x >= b.x && a.y >= b.y && a.x+a.width <= b.x+b.width && a.y+a.height <= b.y+b.height;\r\n    }\r\n}\r\n\r\nexport default Rect;","import Packer from \"./Packer\";\r\nimport Rect from \"./math/Rect\";\r\n\r\nconst METHOD = {\r\n    BestShortSideFit: \"BestShortSideFit\",\r\n    BestLongSideFit: \"BestLongSideFit\",\r\n    BestAreaFit: \"BestAreaFit\",\r\n    BottomLeftRule: \"BottomLeftRule\",\r\n    ContactPointRule: \"ContactPointRule\"\r\n};\r\n\r\nclass MaxRectsBin extends Packer {\r\n\r\n    constructor(width, height, allowRotate=false) {\r\n        super();\r\n\r\n        this.usedRectangles = [];\r\n        this.freeRectangles = [];\r\n\r\n        this.binWidth = width;\r\n        this.binHeight = height;\r\n        this.allowRotate = allowRotate;\r\n\r\n        this.freeRectangles.push(new Rect(0, 0, width, height));\r\n    }\r\n\r\n    pack(data, method) {\r\n        let res = this.insert2(data, method);\r\n        return res;\r\n    }\r\n\r\n    insert(width, height, method=METHOD.BestShortSideFit) {\r\n        let newNode = new Rect();\r\n        let score1 = {value:0};\r\n        let score2 = {value:0};\r\n\r\n        switch(method) {\r\n            case METHOD.BestShortSideFit:\r\n                newNode = this._findPositionForNewNodeBestShortSideFit(width, height, score1, score2);\r\n                break;\r\n            case METHOD.BottomLeftRule:\r\n                newNode = this._findPositionForNewNodeBottomLeft(width, height, score1, score2);\r\n                break;\r\n            case METHOD.ContactPointRule:\r\n                newNode = this._findPositionForNewNodeContactPoint(width, height, score1);\r\n                break;\r\n            case METHOD.BestLongSideFit:\r\n                newNode = this._findPositionForNewNodeBestLongSideFit(width, height, score2, score1);\r\n                break;\r\n            case METHOD.BestAreaFit:\r\n                newNode = this._findPositionForNewNodeBestAreaFit(width, height, score1, score2);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (newNode.height === 0){\r\n            return newNode;\r\n        }\r\n\r\n        this._placeRectangle(newNode);\r\n        return newNode;\r\n    }\r\n\r\n    insert2(rectangles, method) {\r\n        let res = [];\r\n\r\n        while(rectangles.length > 0) {\r\n            let bestScore1 = Infinity;\r\n            let bestScore2 = Infinity;\r\n            let bestRectangleIndex = -1;\r\n            let bestNode = new Rect();\r\n\r\n            for(let i= 0; i < rectangles.length; i++) {\r\n                let score1 = {value:0};\r\n                let score2 = {value:0};\r\n                let newNode = this._scoreRectangle(rectangles[i].frame.w, rectangles[i].frame.h, method, score1, score2);\r\n\r\n                if (score1.value < bestScore1 || (score1.value === bestScore1 && score2.value < bestScore2)) {\r\n                    bestScore1 = score1.value;\r\n                    bestScore2 = score2.value;\r\n                    bestNode = newNode;\r\n                    bestRectangleIndex = i;\r\n                }\r\n            }\r\n\r\n            if (bestRectangleIndex === -1) {\r\n                return res;\r\n            }\r\n\r\n            this._placeRectangle(bestNode);\r\n            let rect = rectangles.splice(bestRectangleIndex, 1)[0];\r\n            rect.frame.x = bestNode.x;\r\n            rect.frame.y = bestNode.y;\r\n\r\n            if(rect.frame.w !== bestNode.width || rect.frame.h !== bestNode.height) {\r\n                rect.rotated = true;\r\n            }\r\n\r\n            res.push(rect);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    _placeRectangle(node) {\r\n        let numRectanglesToProcess = this.freeRectangles.length;\r\n        for(let i= 0; i < numRectanglesToProcess; i++) {\r\n            if (this._splitFreeNode(this.freeRectangles[i], node)) {\r\n                this.freeRectangles.splice(i,1);\r\n                i--;\r\n                numRectanglesToProcess--;\r\n            }\r\n        }\r\n\r\n        this._pruneFreeList();\r\n        this.usedRectangles.push(node);\r\n    }\r\n\r\n    _scoreRectangle(width, height, method, score1, score2) {\r\n        let newNode = new Rect();\r\n        score1.value = Infinity;\r\n        score2.value = Infinity;\r\n        switch(method) {\r\n            case METHOD.BestShortSideFit:\r\n                newNode = this._findPositionForNewNodeBestShortSideFit(width, height, score1, score2);\r\n                break;\r\n            case METHOD.BottomLeftRule:\r\n                newNode = this._findPositionForNewNodeBottomLeft(width, height, score1, score2);\r\n                break;\r\n            case METHOD.ContactPointRule:\r\n                newNode = this._findPositionForNewNodeContactPoint(width, height, score1);\r\n                score1.value = -score1.value;\r\n                break;\r\n            case METHOD.BestLongSideFit:\r\n                newNode = this._findPositionForNewNodeBestLongSideFit(width, height, score2, score1);\r\n                break;\r\n            case METHOD.BestAreaFit:\r\n                newNode = this._findPositionForNewNodeBestAreaFit(width, height, score1, score2);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (newNode.height === 0) {\r\n            score1.value = Infinity;\r\n            score2.value = Infinity;\r\n        }\r\n\r\n        return newNode;\r\n    }\r\n\r\n    _occupancy() {\r\n        let usedRectangles = this.usedRectangles;\r\n        let usedSurfaceArea = 0;\r\n        for(let i= 0; i < usedRectangles.length; i++) {\r\n            usedSurfaceArea += usedRectangles[i].width * usedRectangles[i].height;\r\n        }\r\n\r\n        return usedSurfaceArea/(this.binWidth * this.binHeight);\r\n    }\r\n\r\n    _findPositionForNewNodeBottomLeft(width, height, bestY, bestX) {\r\n        let freeRectangles = this.freeRectangles;\r\n        let bestNode = new Rect();\r\n\r\n        bestY.value = Infinity;\r\n        let rect;\r\n        let topSideY;\r\n        for(let i= 0; i < freeRectangles.length; i++) {\r\n            rect = freeRectangles[i];\r\n            if (rect.width >= width && rect.height >= height) {\r\n                topSideY = rect.y + height;\r\n                if (topSideY < bestY.value || (topSideY === bestY.value && rect.x < bestX.value)) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = width;\r\n                    bestNode.height = height;\r\n                    bestY.value = topSideY;\r\n                    bestX.value = rect.x;\r\n                }\r\n            }\r\n            if (this.allowRotate && rect.width >= height && rect.height >= width) {\r\n                topSideY = rect.y + width;\r\n                if (topSideY < bestY.value || (topSideY === bestY.value && rect.x < bestX.value)) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = height;\r\n                    bestNode.height = width;\r\n                    bestY.value = topSideY;\r\n                    bestX.value = rect.x;\r\n                }\r\n            }\r\n        }\r\n        return bestNode;\r\n    }\r\n\r\n    _findPositionForNewNodeBestShortSideFit(width, height, bestShortSideFit, bestLongSideFit){\r\n        let freeRectangles = this.freeRectangles;\r\n        let bestNode = new Rect();\r\n\r\n        bestShortSideFit.value = Infinity;\r\n\r\n        let rect,\r\n            leftoverHoriz,\r\n            leftoverVert,\r\n            shortSideFit,\r\n            longSideFit;\r\n\r\n        for(let i= 0; i < freeRectangles.length; i++) {\r\n            rect = freeRectangles[i];\r\n            if (rect.width >= width && rect.height >= height) {\r\n                leftoverHoriz = Math.abs(rect.width - width);\r\n                leftoverVert = Math.abs(rect.height - height);\r\n                shortSideFit = Math.min(leftoverHoriz, leftoverVert);\r\n                longSideFit = Math.max(leftoverHoriz, leftoverVert);\r\n\r\n                if (shortSideFit < bestShortSideFit.value || (shortSideFit === bestShortSideFit.value && longSideFit < bestLongSideFit.value)) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = width;\r\n                    bestNode.height = height;\r\n                    bestShortSideFit.value = shortSideFit;\r\n                    bestLongSideFit.value = longSideFit;\r\n                }\r\n            }\r\n\r\n            let flippedLeftoverHoriz,\r\n                flippedLeftoverVert,\r\n                flippedShortSideFit,\r\n                flippedLongSideFit;\r\n\r\n            if (this.allowRotate && rect.width >= height && rect.height >= width) {\r\n                flippedLeftoverHoriz = Math.abs(rect.width - height);\r\n                flippedLeftoverVert = Math.abs(rect.height - width);\r\n                flippedShortSideFit = Math.min(flippedLeftoverHoriz, flippedLeftoverVert);\r\n                flippedLongSideFit = Math.max(flippedLeftoverHoriz, flippedLeftoverVert);\r\n\r\n                if (flippedShortSideFit < bestShortSideFit.value || (flippedShortSideFit === bestShortSideFit.value && flippedLongSideFit < bestLongSideFit.value)) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = height;\r\n                    bestNode.height = width;\r\n                    bestShortSideFit.value = flippedShortSideFit;\r\n                    bestLongSideFit.value = flippedLongSideFit;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bestNode;\r\n    }\r\n\r\n    _findPositionForNewNodeBestLongSideFit(width, height, bestShortSideFit, bestLongSideFit) {\r\n        let freeRectangles = this.freeRectangles;\r\n        let bestNode = new Rect();\r\n        bestLongSideFit.value = Infinity;\r\n\r\n        let rect,\r\n            leftoverHoriz,\r\n            leftoverVert,\r\n            shortSideFit,\r\n            longSideFit;\r\n\r\n        for(let i= 0; i < freeRectangles.length; i++) {\r\n            rect = freeRectangles[i];\r\n\r\n            if (rect.width >= width && rect.height >= height) {\r\n                leftoverHoriz = Math.abs(rect.width - width);\r\n                leftoverVert = Math.abs(rect.height - height);\r\n                shortSideFit = Math.min(leftoverHoriz, leftoverVert);\r\n                longSideFit = Math.max(leftoverHoriz, leftoverVert);\r\n\r\n                if (longSideFit < bestLongSideFit.value || (longSideFit === bestLongSideFit.value && shortSideFit < bestShortSideFit.value)) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = width;\r\n                    bestNode.height = height;\r\n                    bestShortSideFit.value = shortSideFit;\r\n                    bestLongSideFit.value = longSideFit;\r\n                }\r\n            }\r\n\r\n            if (this.allowRotate && rect.width >= height && rect.height >= width) {\r\n                leftoverHoriz = Math.abs(rect.width - height);\r\n                leftoverVert = Math.abs(rect.height - width);\r\n                shortSideFit = Math.min(leftoverHoriz, leftoverVert);\r\n                longSideFit = Math.max(leftoverHoriz, leftoverVert);\r\n\r\n                if (longSideFit < bestLongSideFit.value || (longSideFit === bestLongSideFit.value && shortSideFit < bestShortSideFit.value)) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = height;\r\n                    bestNode.height = width;\r\n                    bestShortSideFit.value = shortSideFit;\r\n                    bestLongSideFit.value = longSideFit;\r\n                }\r\n            }\r\n        }\r\n        return bestNode;\r\n    }\r\n\r\n    _findPositionForNewNodeBestAreaFit(width, height, bestAreaFit, bestShortSideFit) {\r\n        let freeRectangles = this.freeRectangles;\r\n        let bestNode = new Rect();\r\n\r\n        bestAreaFit.value = Infinity;\r\n\r\n        let rect,\r\n            leftoverHoriz,\r\n            leftoverVert,\r\n            shortSideFit,\r\n            areaFit;\r\n\r\n        for(let i= 0; i < freeRectangles.length; i++) {\r\n            rect = freeRectangles[i];\r\n            areaFit = rect.width * rect.height - width * height;\r\n\r\n            if (rect.width >= width && rect.height >= height) {\r\n                leftoverHoriz = Math.abs(rect.width - width);\r\n                leftoverVert = Math.abs(rect.height - height);\r\n                shortSideFit = Math.min(leftoverHoriz, leftoverVert);\r\n\r\n                if (areaFit < bestAreaFit.value || (areaFit === bestAreaFit.value && shortSideFit < bestShortSideFit.value)) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = width;\r\n                    bestNode.height = height;\r\n                    bestShortSideFit.value = shortSideFit;\r\n                    bestAreaFit = areaFit;\r\n                }\r\n            }\r\n\r\n            if (this.allowRotate && rect.width >= height && rect.height >= width) {\r\n                leftoverHoriz = Math.abs(rect.width - height);\r\n                leftoverVert = Math.abs(rect.height - width);\r\n                shortSideFit = Math.min(leftoverHoriz, leftoverVert);\r\n\r\n                if (areaFit < bestAreaFit.value || (areaFit === bestAreaFit.value && shortSideFit < bestShortSideFit.value)) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = height;\r\n                    bestNode.height = width;\r\n                    bestShortSideFit.value = shortSideFit;\r\n                    bestAreaFit.value = areaFit;\r\n                }\r\n            }\r\n        }\r\n        return bestNode;\r\n    }\r\n\r\n    _commonIntervalLength(i1start, i1end, i2start, i2end){\r\n        if (i1end < i2start || i2end < i1start){\r\n            return 0;\r\n        }\r\n        return Math.min(i1end, i2end) - Math.max(i1start, i2start);\r\n    }\r\n\r\n    _contactPointScoreNode(x, y, width, height){\r\n        let usedRectangles = this.usedRectangles;\r\n        let score = 0;\r\n\r\n        if (x === 0 || x + width === this.binWidth)\r\n            score += height;\r\n        if (y === 0 || y + height === this.binHeight)\r\n            score += width;\r\n        let rect;\r\n        for(let i= 0; i < usedRectangles.length; i++) {\r\n            rect = usedRectangles[i];\r\n            if (rect.x === x + width || rect.x + rect.width === x)\r\n                score += this._commonIntervalLength(rect.y, rect.y + rect.height, y, y + height);\r\n            if (rect.y === y + height || rect.y + rect.height === y)\r\n                score += this._commonIntervalLength(rect.x, rect.x + rect.width, x, x + width);\r\n        }\r\n        return score;\r\n    }\r\n\r\n    _findPositionForNewNodeContactPoint(width, height, bestContactScore) {\r\n        let freeRectangles = this.freeRectangles;\r\n        let bestNode = new Rect();\r\n\r\n        bestContactScore.value = -1;\r\n\r\n        let rect,\r\n            score;\r\n\r\n        for(let i= 0; i < freeRectangles.length; i++) {\r\n            rect = freeRectangles[i];\r\n            if (rect.width >= width && rect.height >= height) {\r\n                score = this._contactPointScoreNode(rect.x, rect.y, width, height);\r\n                if (score > bestContactScore.value) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = width;\r\n                    bestNode.height = height;\r\n                    bestContactScore = score;\r\n                }\r\n            }\r\n            if (this.allowRotate && rect.width >= height && rect.height >= width) {\r\n                score = this._contactPointScoreNode(rect.x, rect.y, height, width);\r\n                if (score > bestContactScore.value) {\r\n                    bestNode.x = rect.x;\r\n                    bestNode.y = rect.y;\r\n                    bestNode.width = height;\r\n                    bestNode.height = width;\r\n                    bestContactScore.value = score;\r\n                }\r\n            }\r\n        }\r\n        return bestNode;\r\n    }\r\n\r\n    _splitFreeNode(freeNode, usedNode){\r\n        let freeRectangles = this.freeRectangles;\r\n        if (usedNode.x >= freeNode.x + freeNode.width || usedNode.x + usedNode.width <= freeNode.x ||\r\n            usedNode.y >= freeNode.y + freeNode.height || usedNode.y + usedNode.height <= freeNode.y)\r\n            return false;\r\n        let newNode;\r\n        if (usedNode.x < freeNode.x + freeNode.width && usedNode.x + usedNode.width > freeNode.x) {\r\n            if (usedNode.y > freeNode.y && usedNode.y < freeNode.y + freeNode.height) {\r\n                newNode = freeNode.clone();\r\n                newNode.height = usedNode.y - newNode.y;\r\n                freeRectangles.push(newNode);\r\n            }\r\n\r\n            if (usedNode.y + usedNode.height < freeNode.y + freeNode.height) {\r\n                newNode = freeNode.clone();\r\n                newNode.y = usedNode.y + usedNode.height;\r\n                newNode.height = freeNode.y + freeNode.height - (usedNode.y + usedNode.height);\r\n                freeRectangles.push(newNode);\r\n            }\r\n        }\r\n\r\n        if (usedNode.y < freeNode.y + freeNode.height && usedNode.y + usedNode.height > freeNode.y) {\r\n            if (usedNode.x > freeNode.x && usedNode.x < freeNode.x + freeNode.width) {\r\n                newNode = freeNode.clone();\r\n                newNode.width = usedNode.x - newNode.x;\r\n                freeRectangles.push(newNode);\r\n            }\r\n\r\n            if (usedNode.x + usedNode.width < freeNode.x + freeNode.width) {\r\n                newNode = freeNode.clone();\r\n                newNode.x = usedNode.x + usedNode.width;\r\n                newNode.width = freeNode.x + freeNode.width - (usedNode.x + usedNode.width);\r\n                freeRectangles.push(newNode);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    _pruneFreeList() {\r\n        let freeRectangles = this.freeRectangles;\r\n        for(let i = 0;i < freeRectangles.length; i++)\r\n            for(let j= i+1; j < freeRectangles.length; j++) {\r\n                if (Rect.hitTest(freeRectangles[i], freeRectangles[j])) {\r\n                    freeRectangles.splice(i,1);\r\n                    break;\r\n                }\r\n                if (Rect.hitTest(freeRectangles[j], freeRectangles[i])) {\r\n                    freeRectangles.splice(j,1);\r\n                }\r\n            }\r\n    }\r\n\r\n    static get type() {\r\n        return \"MaxRectsBin\";\r\n    }\r\n\r\n    static get methods() {\r\n        return METHOD;\r\n    }\r\n\r\n    static getMethodProps(id='') {\r\n        switch(id) {\r\n            case METHOD.BestShortSideFit:\r\n                return {name: \"Best short side fit\", description: \"Positions the Rectangle against the short side of a free Rectangle into which it fits the best.\"};\r\n            case METHOD.BestLongSideFit:\r\n                return {name: \"Best long side fit\", description: \"Positions the Rectangle against the long side of a free Rectangle into which it fits the best.\"};\r\n            case METHOD.BestAreaFit:\r\n                return {name: \"Best area fit\", description: \"Positions the Rectangle into the smallest free Rectangle into which it fits.\"};\r\n            case METHOD.BottomLeftRule:\r\n                return {name: \"Bottom left rule\", description: \"Does the Tetris placement.\"};\r\n            case METHOD.ContactPointRule:\r\n                return {name: \"Contact point rule\", description: \"Choosest the placement where the Rectangle touches other Rectangles as much as possible.\"};\r\n            default:\r\n                throw Error(\"Unknown method \" + id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default MaxRectsBin;\r\n","import Packer from \"./Packer\";\r\n\r\nconst METHOD = {\r\n    Automatic: \"Automatic\"\r\n};\r\n\r\nclass OptimalPacker extends Packer {\r\n    constructor(width, height, allowRotate=false) {\r\n        super();\r\n    }\r\n\r\n    pack(data, method) {\r\n        throw new Error('OptimalPacker is a dummy and cannot be used directly');\r\n    }\r\n    \r\n    static get type() {\r\n        return \"OptimalPacker\";\r\n    }\r\n\r\n    static get methods() {\r\n        return METHOD;\r\n    }\r\n\r\n    static getMethodProps(id='') {\r\n        switch(id) {\r\n            case METHOD.Automatic:\r\n                return {name: \"Automatic\", description: \"\"};\r\n            default:\r\n                throw Error(\"Unknown method \" + id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default OptimalPacker;","import MaxRectsPacker from \"./MaxRectsPacker\";\r\nimport MaxRectsBin from \"./MaxRectsBin\";\r\nimport OptimalPacker from \"./OptimalPacker\";\r\n\r\nconst list = [\r\n    MaxRectsBin,\r\n    MaxRectsPacker,\r\n    OptimalPacker\r\n];\r\n\r\nfunction getPackerByType(type) {\r\n    for(let item of list) {\r\n        if(item.type === type) {\r\n            return item;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport { getPackerByType };\r\nexport default list;","/**\r\n * @type {string[]}\r\n */\r\nexport const TEXTURES_BACKGROUND = [\"grid-texture\", \"white-texture\", \"pink-texture\", \"black-texture\"];\r\n","function createHTTPQuery(params) {\r\n    let query = params || '';\r\n    if (query && ('string' !== typeof query)) {\r\n        query = [];\r\n        for (let key of Object.keys(params)) {\r\n            query.push(`${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`);\r\n        }\r\n        query = query.join('&');\r\n    }\r\n    return query;\r\n}\r\n\r\nfunction createXMLHTTPRequest(url, callback=null, errorCallback=null, dataType=\"\") {\r\n\r\n    let xmlhttp = (window.XMLHttpRequest && new XMLHttpRequest()) || null;\r\n\r\n    if (xmlhttp) {\r\n        xmlhttp.onreadystatechange = function () {\r\n            if (xmlhttp.readyState === 4) {\r\n                let data = null, status = 'success';\r\n                if (xmlhttp.status < 400) {\r\n                    if (dataType === 'arraybuffer') {\r\n                        data = xmlhttp.response;\r\n                    }\r\n                    if (dataType === 'xml') {\r\n                        data = xmlhttp.responseXML;\r\n                    }\r\n                    if (!data && xmlhttp.responseText) {\r\n                        data = xmlhttp.responseText;\r\n                    }\r\n                    \r\n                    if(callback) callback(data);\r\n                }\r\n                else {\r\n                    if(errorCallback) errorCallback(`${url} HTTP Error ${xmlhttp.status}: ${xmlhttp.statusText}`);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    return xmlhttp;\r\n}\r\n\r\nfunction send(url, method=\"GET\", params=\"\", callback=null, errorCallback=null, dataType=\"text\") {\r\n\r\n    let xmlhttp = createXMLHTTPRequest(url, callback, errorCallback, dataType);\r\n    if (xmlhttp) {\r\n        let query = createHTTPQuery(params);\r\n\r\n        if(method == \"GET\" && query) url += \"?\" + query;\r\n\r\n        xmlhttp.open(method, url, true);\r\n\r\n        if (dataType == 'arraybuffer') {\r\n            xmlhttp.responseType = 'arraybuffer';\r\n        }\r\n\r\n        if (method == \"POST\") {\r\n            xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n        }\r\n        xmlhttp.send(method == \"GET\" ? null : query);\r\n    }\r\n}\r\n\r\nfunction GET(url, params=\"\", callback=null, errorCallback=null, dataType=\"text\") {\r\n    return send(url, \"GET\", params, callback, errorCallback, dataType);\r\n}\r\n\r\nfunction POST(url, params=\"\", callback=null, errorCallback=null, dataType=\"text\") {\r\n    return send(url, \"POST\", params, callback, errorCallback, dataType);\r\n}\r\n\r\nexport {GET, POST};\r\nexport default send;\r\n","const SPECIAL_CHAR = {\r\n    SPACE: {\r\n        CODE: 32,\r\n        ID: 'space'\r\n    },\r\n    TAB: {\r\n        CODE: 9,\r\n        ID: 'tab'\r\n    }\r\n};\r\n\r\nclass Parser\r\n{\r\n    static parseChar(data) {\r\n        let parsed = null;\r\n        switch(data.code) {\r\n            case SPECIAL_CHAR.SPACE.CODE:\r\n            case SPECIAL_CHAR.TAB.CODE: {\r\n                parsed = {\r\n                    \"letter\": data.letter,\r\n                    \"code\": data.code,\r\n                    \"x\": 0,\r\n                    \"y\": 0,\r\n                    \"width\": 0,\r\n                    \"height\": 0,\r\n                    \"xoffset\": 0,\r\n                    \"yoffset\": 0,\r\n                    \"xadvance\": data.xadvance\r\n                };\r\n                break;\r\n            }\r\n            default: {\r\n                parsed = {\r\n                    \"letter\": data.text,\r\n                    \"code\": data.code,\r\n                    \"x\": data.frame.x,\r\n                    \"y\": data.frame.y,\r\n                    \"width\": data.frame.w,\r\n                    \"height\": data.frame.h,\r\n                    \"xoffset\": data.xoffset,\r\n                    \"yoffset\": data.yoffset,\r\n                    \"xadvance\": data.xadvance\r\n                };\r\n                break;\r\n            }\r\n        }\r\n\r\n        return parsed;\r\n    }\r\n\r\n    static parseFont(data, params) {\r\n        let parsed = {\r\n            \"name\": data.name,\r\n            \"size\": data.size,\r\n            \"lineHeight\": data.lineHeight,\r\n            \"scaleW\": params.width,\r\n            \"scaleH\": params.height,\r\n            \"num_pages\": 0,\r\n            \"pages\": [\r\n                {\r\n                    \"id_page\": 0,\r\n                    \"file_name\": params.textureName + \".\" + params.textureFormat\r\n                }\r\n            ],\r\n        };\r\n\r\n        const chars = Object.keys(data.characters);\r\n        parsed[\"chars_count\"] = chars.length;\r\n        parsed[\"chars\"] = [];\r\n\r\n        for ( const charId in data.characters ) {\r\n            parsed[\"chars\"].push(\r\n                this.parseChar(data.characters[charId])\r\n            )\r\n        }\r\n\r\n        // Space\r\n        parsed[\"chars\"].push(\r\n            this.parseChar({\r\n                \"code\": SPECIAL_CHAR.SPACE.CODE,\r\n                \"letter\": SPECIAL_CHAR.SPACE.ID,\r\n                \"xadvance\": data.spaceWidth\r\n            })\r\n        );\r\n\r\n        // Tabs\r\n        parsed[\"chars\"].push(\r\n            this.parseChar({\r\n                \"code\": SPECIAL_CHAR.TAB.CODE,\r\n                \"letter\": SPECIAL_CHAR.TAB.ID,\r\n                \"xadvance\": data.tabWidth\r\n            })\r\n        );\r\n\r\n        parsed[\"kernings_count\"] = 0;\r\n        parsed[\"kernings\"] = [];\r\n\r\n        return parsed;\r\n    }\r\n\r\n    static parseMultiFont(data, params) {\r\n        let parsed = {\r\n            \"scaleW\": params.width,\r\n            \"scaleH\": params.height,\r\n            \"file_name\": params.textureName + \".\" + params.textureFormat\r\n        };\r\n\r\n        parsed[\"fonts\"] = [];\r\n        for (const fontId in data) {\r\n            if (data.hasOwnProperty(fontId)) {\r\n                let fontParsed = {\r\n                    \"name\": data[fontId].name,\r\n                    \"size\": data[fontId].size,\r\n                    \"lineHeight\": data[fontId].lineHeight,\r\n                };\r\n\r\n                const chars = Object.keys(data[fontId].characters);\r\n                fontParsed[\"chars_count\"] = chars.length;\r\n                fontParsed[\"chars\"] = [];\r\n\r\n                for ( const charId in data[fontId].characters ) {\r\n                    fontParsed[\"chars\"].push(\r\n                        this.parseChar(data[fontId].characters[charId])\r\n                    )\r\n                }\r\n\r\n                // Space\r\n                fontParsed[\"chars\"].push(\r\n                    this.parseChar({\r\n                        \"code\": SPECIAL_CHAR.SPACE.CODE,\r\n                        \"letter\": SPECIAL_CHAR.SPACE.ID,\r\n                        \"xadvance\": data[fontId].spaceWidth\r\n                    })\r\n                );\r\n\r\n                // Tabs\r\n                fontParsed[\"chars\"].push(\r\n                    this.parseChar({\r\n                        \"code\": SPECIAL_CHAR.TAB.CODE,\r\n                        \"letter\": SPECIAL_CHAR.TAB.ID,\r\n                        \"xadvance\": data[fontId].tabWidth\r\n                    })\r\n                );\r\n\r\n                fontParsed[\"kernings_count\"] = 0;\r\n                fontParsed[\"kernings\"] = [];\r\n\r\n                parsed[\"fonts\"].push(fontParsed);\r\n            }\r\n        }\r\n\r\n        return parsed;\r\n    }\r\n}\r\n\r\nexport default Parser;\r\n","import {GET} from \"../connection/ajax\";\r\nimport mustache from \"mustache/mustache\";\r\nimport JSZip from 'jszip';\r\nimport FileSaver from 'file-saver';\r\nimport Parser from \"./Parser\";\r\nimport list from './list.json';\r\n\r\nclass Exporter {\r\n\r\n    /**\r\n     * @param type\r\n     * @returns {null|Object}\r\n     */\r\n    static getExporterByType(type) {\r\n        for (let item of list) {\r\n            if (item.type === type) {\r\n                return item;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static async startExporter(buffer, data, packOptions) {\r\n        let files = [];\r\n        let mtsFile = 'exporters/' + packOptions.exporter.template;\r\n        let parsed = [];\r\n\r\n        // ToDo: correct export identification. At the moment, we have one completed loader PIXI.extras.BitmapText\r\n        if (packOptions.exporter.type === 'Pixi.js BitmapFont') {\r\n            if (packOptions.multiFont) {\r\n                for (const fontId in data) {\r\n                    if (data.hasOwnProperty(fontId)) {\r\n                        parsed.push(Parser.parseFont(data[fontId], {\r\n                            \"width\": buffer.width,\r\n                            \"height\": buffer.height,\r\n                            \"textureName\": packOptions.textureName,\r\n                            \"textureFormat\": packOptions.textureFormat\r\n                        }));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                parsed.push(Parser.parseFont(data[packOptions.selectedFont], {\r\n                    \"width\": buffer.width,\r\n                    \"height\": buffer.height,\r\n                    \"textureName\": packOptions.textureName,\r\n                    \"textureFormat\": packOptions.textureFormat\r\n                }));\r\n            }\r\n        }\r\n        else if ( packOptions.exporter.type === 'Pixi.js MultiBitmapFont') {\r\n            parsed.push(Parser.parseMultiFont(data, {\r\n                \"width\": buffer.width,\r\n                \"height\": buffer.height,\r\n                \"textureName\": packOptions.textureName,\r\n                \"textureFormat\": packOptions.textureFormat\r\n            }));\r\n        }\r\n        else {\r\n            // ToDo\r\n        }\r\n\r\n        try {\r\n            let i;\r\n            let results = [];\r\n            const len = parsed.length;\r\n\r\n            for ( i = 0; i < len; i++ ) {\r\n                results.push(await this.loadTemplate(parsed[i], mtsFile));\r\n            }\r\n\r\n            let imageData = buffer.toDataURL(packOptions.textureFormat === 'png' ? 'image/png' : 'image/jpeg');\r\n            let parts = imageData.split(\",\");\r\n            parts.shift();\r\n            imageData = parts.join(\",\");\r\n\r\n            files.push({\r\n                name: packOptions.textureName + \".\" + packOptions.textureFormat,\r\n                content: imageData,\r\n                base64: true\r\n            });\r\n\r\n            if ( results.length > 1 ) {\r\n                for ( const index in results ) {\r\n                    if ( results.hasOwnProperty(index) ) {\r\n                        files.push({\r\n                            name: packOptions.textureName + \"_\" + index + \".xml\",\r\n                            content: results[index]\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                files.push({\r\n                    name: packOptions.textureName  + \".xml\",\r\n                    content: results[0]\r\n                });\r\n            }\r\n\r\n            let zip = new JSZip();\r\n\r\n            for (let file of files) {\r\n                zip.file(file.name, file.content, {base64: !!file.base64});\r\n            }\r\n\r\n            zip.generateAsync({type: \"blob\"})\r\n                .then((content) => {\r\n                    FileSaver.saveAs(content, packOptions.fileName + '.zip');\r\n                });\r\n        }\r\n        catch (e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    static loadTemplate(data, mtsFile) {\r\n        return new Promise((resolve, reject) => {\r\n            GET(mtsFile, null, (template) => {\r\n                this.renderTemplate(template, data, resolve, reject);\r\n            }, () => reject('multifont.mts not found'));\r\n        });\r\n    }\r\n\r\n    static renderTemplate(template, data, resolve, reject) {\r\n        try {\r\n            let ret = mustache.render(template, data);\r\n            resolve(ret);\r\n        }\r\n        catch (e) {\r\n            reject(e.message);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Exporter;\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport packers, {getPackerByType} from '../../utils/packing/packers';\r\nimport {EVENT, Observer} from '../../utils/Observer';\r\nimport {TEXTURES_BACKGROUND as Textures} from \"../../model/constants/background\";\r\nimport list from '../../utils/exporter/list';\r\nimport Exporter from \"../../utils/exporter/Export\";\r\n\r\nimport '../../styles/properties.css';\r\n\r\nclass Properties extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.changeTab = this.changeTab.bind(this);\r\n        this.toggleChange = this.toggleChange.bind(this);\r\n        this.onFontPropChanged = this.onFontPropChanged.bind(this);\r\n        this.onPackerChange = this.onPackerChange.bind(this);\r\n        this.startExport = this.startExport.bind(this);\r\n        this.onFontSelected = this.onFontSelected.bind(this);\r\n        this.onCharSelected = this.onCharSelected.bind(this);\r\n        this.setBack = this.setBack.bind(this);\r\n        this.onToggleSwitchChange = this.onToggleSwitchChange.bind(this);\r\n        this.onExporterChanged = this.onExporterChanged.bind(this);\r\n        this.onDimChanged = this.onDimChanged.bind(this);\r\n\r\n        this.methodItems = null;\r\n        this.packOptions = this.setPackDefault();\r\n        this.updatePackerMethods();\r\n\r\n        this.state = {\r\n            multiTexture: false,\r\n            textureBack: 'grid-back',\r\n            packer: this.packOptions.packer,\r\n            selectedFont: '',\r\n            selectedChar: ''\r\n        };\r\n\r\n        Observer.on(EVENT.FONT_SELECTED, this.onFontSelected);\r\n        Observer.on(EVENT.CHAR_SELECTED, this.onCharSelected);\r\n    }\r\n\r\n    onExporterChanged(event) {\r\n        const exporter = Exporter.getExporterByType(ReactDOM.findDOMNode(this.refs.exporter).value);\r\n\r\n        ReactDOM.findDOMNode(this.refs.allowRotation).disabled = !exporter.allowRotation;\r\n        ReactDOM.findDOMNode(this.refs.allowTrim).disabled = !exporter.allowTrim;\r\n        ReactDOM.findDOMNode(this.refs.trimmode).disabled = !exporter.allowTrim;\r\n\r\n        ReactDOM.findDOMNode(this.refs.toggleSwitch).disabled = !(exporter.allowMultiFont && exporter.allowOneFont);\r\n\r\n        if (ReactDOM.findDOMNode(this.refs.toggleSwitch).disabled) {\r\n            ReactDOM.findDOMNode(this.refs.toggleSwitch).checked = exporter.allowMultiFont;\r\n        }\r\n\r\n        this.packOptions.exporter = exporter;\r\n        this.packOptions.allowTrim = exporter.allowTrim;\r\n        this.packOptions.allowRotation = exporter.allowRotation;\r\n\r\n        this.emitChanges();\r\n    }\r\n\r\n    onFontSelected(data) {\r\n        this.state.selectedFont = data.selectedFont;\r\n        this.updateFontProps();\r\n    }\r\n\r\n    onCharSelected(data) {\r\n        this.state.selectedChar = data.selectedChar;\r\n        this.state.selectedFont = data.selectedFont;\r\n        this.updateFontProps();\r\n    }\r\n\r\n    updateFontProps() {\r\n        if (this.state.selectedFont) {\r\n            this.packOptions.selectedFont = this.state.selectedFont;\r\n\r\n            const fontData = this.props.bitmapfonts[this.state.selectedFont];\r\n\r\n            ReactDOM.findDOMNode(this.refs.bmpfSelected).value = this.state.selectedFont;\r\n            ReactDOM.findDOMNode(this.refs.size).value = fontData.size;\r\n            ReactDOM.findDOMNode(this.refs.lineHeight).value = fontData.lineHeight;\r\n            ReactDOM.findDOMNode(this.refs.spaceWidth).value = fontData.spaceWidth;\r\n            ReactDOM.findDOMNode(this.refs.tabWidth).value = fontData.tabWidth;\r\n            ReactDOM.findDOMNode(this.refs.monoSpace).checked = fontData.monospace;\r\n\r\n            const charData = fontData.getCharById(this.state.selectedChar);\r\n\r\n            if (charData) {\r\n                ReactDOM.findDOMNode(this.refs.selectedChar).value = charData.text;\r\n                ReactDOM.findDOMNode(this.refs.asciiCode).value = charData.code;\r\n                ReactDOM.findDOMNode(this.refs.xOffSet).value = charData.xoffset;\r\n                ReactDOM.findDOMNode(this.refs.yOffSet).value = charData.yoffset;\r\n                ReactDOM.findDOMNode(this.refs.xAdvance).value = charData.xadvance;\r\n            }\r\n            else {\r\n                ReactDOM.findDOMNode(this.refs.xOffSet).value = 0;\r\n                ReactDOM.findDOMNode(this.refs.yOffSet).value = 0;\r\n                ReactDOM.findDOMNode(this.refs.xAdvance).value = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    emitChanges() {\r\n        let data = Object.assign({}, this.packOptions);\r\n        data.packer = getPackerByType(data.packer);\r\n\r\n        Observer.emit(EVENT.PACK_OPTIONS_CHANGED, data);\r\n    }\r\n\r\n    setPackDefault() {\r\n        let data = {};\r\n\r\n        data.selectedFont = null;\r\n        data.multiFont = false;\r\n        data.exporter = list[0];\r\n        data.fileName = 'pack-result';\r\n        data.textureName = 'texture';\r\n        data.textureFormat = 'png';\r\n        data.scale = 1;\r\n        data.width = 2048;\r\n        data.height = 2048;\r\n        data.fixedSize = false;\r\n        data.powerOfTwo = false;\r\n        data.allowRotation = false;\r\n        data.allowTrim = false;\r\n        data.trimMode = 'trim';\r\n        data.detectIdentical = true;\r\n        data.packer = packers[0].type;\r\n        data.packerMethod = Object.keys(packers[0].methods)[0];\r\n\r\n        return data;\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Pack properties selected\r\n        document.getElementById(\"id_button_pack\")\r\n            .click();\r\n        this.emitChanges();\r\n    }\r\n\r\n    changeTab(event) {\r\n        if (event.currentTarget.id === 'id_button_pack') {\r\n            ReactDOM.findDOMNode(this.refs.tab_font).style.display = \"none\";\r\n            ReactDOM.findDOMNode(this.refs.tab_properties).style.display = \"block\";\r\n\r\n            let refTabButtonPack = ReactDOM.findDOMNode(this.refs.tab_button_pack);\r\n            refTabButtonPack.className += \" active\";\r\n\r\n            let refTabButtonFont = ReactDOM.findDOMNode(this.refs.tab_button_font);\r\n            refTabButtonFont.className = refTabButtonFont.className.replace(\" active\", \"\");\r\n        }\r\n        else {\r\n            ReactDOM.findDOMNode(this.refs.tab_font).style.display = \"block\";\r\n            ReactDOM.findDOMNode(this.refs.tab_properties).style.display = \"none\";\r\n\r\n            let refTabButtonFont = ReactDOM.findDOMNode(this.refs.tab_button_font);\r\n            refTabButtonFont.className += \" active\";\r\n\r\n            let refTabButtonPack = ReactDOM.findDOMNode(this.refs.tab_button_pack);\r\n            refTabButtonPack.className = refTabButtonPack.className.replace(\" active\", \"\");\r\n        }\r\n    }\r\n\r\n    updatePackerMethods() {\r\n        let currentPacker = getPackerByType(this.packOptions.packer);\r\n\r\n        if (!currentPacker) {\r\n            currentPacker = packers[0];\r\n        }\r\n\r\n        this.methodItems = [];\r\n\r\n        let methods = Object.keys(currentPacker.methods);\r\n        for (let item of methods) {\r\n            this.methodItems.push(<option value={item} key={\"packer-method-\" + item}>{item}</option>);\r\n        }\r\n\r\n        this.packOptions.packerMethod = methods[0];\r\n    }\r\n\r\n    onPackerChange(event) {\r\n        this.packOptions.packer = ReactDOM.findDOMNode(this.refs.packer).value;\r\n        this.updatePackerMethods();\r\n\r\n        this.setState({\r\n            packer: this.packOptions.packer\r\n        });\r\n\r\n        this.emitChanges();\r\n    }\r\n\r\n    onFontPropChanged(event) {\r\n        this.props.bitmapfonts[this.state.selectedFont].size = Number(ReactDOM.findDOMNode(this.refs.size).value);\r\n        this.props.bitmapfonts[this.state.selectedFont].lineHeight = Number(ReactDOM.findDOMNode(this.refs.lineHeight).value);\r\n        this.props.bitmapfonts[this.state.selectedFont].spaceWidth = Number(ReactDOM.findDOMNode(this.refs.spaceWidth).value);\r\n        this.props.bitmapfonts[this.state.selectedFont].tabWidth = Number(ReactDOM.findDOMNode(this.refs.tabWidth).value);\r\n        this.props.bitmapfonts[this.state.selectedFont].monospace = ReactDOM.findDOMNode(this.refs.monoSpace).checked;\r\n\r\n        if (this.props.bitmapfonts[this.state.selectedFont].monospace) {\r\n            this.props.bitmapfonts[this.state.selectedFont].setCharMonospace();\r\n        }\r\n        else {\r\n            const charData = this.props.bitmapfonts[this.state.selectedFont].getCharById(this.state.selectedChar);\r\n\r\n            if (charData) {\r\n                this.props.bitmapfonts[this.state.selectedFont].characters[this.state.selectedChar].xoffset = Number(ReactDOM.findDOMNode(this.refs.xOffSet).value);\r\n                this.props.bitmapfonts[this.state.selectedFont].characters[this.state.selectedChar].yoffset = Number(ReactDOM.findDOMNode(this.refs.yOffSet).value);\r\n                this.props.bitmapfonts[this.state.selectedFont].characters[this.state.selectedChar].xadvance = Number(ReactDOM.findDOMNode(this.refs.xAdvance).value);\r\n            }\r\n        }\r\n\r\n        Observer.emit(EVENT.UPDATE_RESULT);\r\n    }\r\n\r\n    toggleChange(event) {\r\n        this.packOptions.fileName = ReactDOM.findDOMNode(this.refs.fileName).value;\r\n        this.packOptions.textureFormat = ReactDOM.findDOMNode(this.refs.textureFormat).value;\r\n        this.packOptions.textureName = ReactDOM.findDOMNode(this.refs.textureName).value;\r\n        this.packOptions.scale = ReactDOM.findDOMNode(this.refs.scale).value;\r\n        this.packOptions.width = ReactDOM.findDOMNode(this.refs.width).value;\r\n        this.packOptions.height = ReactDOM.findDOMNode(this.refs.height).value;\r\n        this.packOptions.fixedSize = ReactDOM.findDOMNode(this.refs.fixedSize).checked;\r\n        this.packOptions.powerOfTwo = ReactDOM.findDOMNode(this.refs.powerOfTwo).checked;\r\n        this.packOptions.detectIdentical = ReactDOM.findDOMNode(this.refs.detectIdentical).checked;\r\n        this.packOptions.allowTrim = ReactDOM.findDOMNode(this.refs.allowTrim).checked;\r\n        this.packOptions.allowRotation = ReactDOM.findDOMNode(this.refs.allowRotation).checked;\r\n        this.packOptions.packer = ReactDOM.findDOMNode(this.refs.packer).value;\r\n        this.packOptions.packerMethod = ReactDOM.findDOMNode(this.refs.packerMethod).value;\r\n\r\n        // emit changes\r\n        this.emitChanges();\r\n    }\r\n\r\n    startExport() {\r\n        Observer.emit(EVENT.START_EXPORT);\r\n    }\r\n\r\n    setBack(event) {\r\n        let classNames = event.target.className.split(\" \");\r\n\r\n        Observer.emit(EVENT.BACKGROUND_TEXTURE_CHANGED, classNames[1]);\r\n    }\r\n\r\n    onToggleSwitchChange(event) {\r\n        this.packOptions.multiFont = event.currentTarget.checked;\r\n\r\n        // emit changes\r\n        this.emitChanges();\r\n    }\r\n\r\n    onDimChanged(event) {\r\n        if (event) {\r\n            let key = event.keyCode || event.which;\r\n            if (key === 13) {\r\n                if ( event.currentTarget.value === '' ) {\r\n                    event.currentTarget.value = 1;\r\n                }\r\n                this.toggleChange();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"properties\">\r\n                <div className=\"tabs\">\r\n                    <div className=\"tab\">\r\n                        <button ref=\"tab_button_pack\" id=\"id_button_pack\" className=\"tab-button\"\r\n                                onClick={this.changeTab}>Pack Properties\r\n                        </button>\r\n                        <button ref=\"tab_button_font\" id=\"id_button_font\" className=\"tab-button\"\r\n                                onClick={this.changeTab}>Font Properties\r\n                        </button>\r\n                    </div>\r\n                    <div ref=\"tab_properties\" className=\"tab-content\">\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Pack Name</span>\r\n                            <input className=\"properties-input-field\" ref=\"fileName\"\r\n                                   defaultValue={this.packOptions.fileName}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Texture Name</span>\r\n                            <input className=\"properties-input-field\" ref=\"textureName\"\r\n                                   defaultValue={this.packOptions.textureName}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Format</span>\r\n                            <select className=\"properties-input-field\" ref=\"textureFormat\"\r\n                                    defaultValue={this.packOptions.textureFormat} onChange={this.toggleChange}>\r\n                                <option value=\"png\">png</option>\r\n                                <option value=\"jpg\">jpg</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Exporter</span>\r\n                            <select className=\"properties-input-field\" ref=\"exporter\" onChange={this.onExporterChanged}\r\n                                    defaultValue={this.packOptions.exporter}>\r\n                                {list.map(node => {\r\n                                    return (<option key={\"exporter-\" + node.type}\r\n                                                    defaultValue={node.type}>{node.type}</option>)\r\n                                })}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Scale</span>\r\n                            <input className=\"properties-input-field\" ref=\"scale\"\r\n                                   defaultValue={this.packOptions.scale}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Width</span>\r\n                            <input className=\"properties-input-field\" ref=\"width\" type=\"number\" min=\"0\" onKeyDown={this.onDimChanged}\r\n                                   defaultValue={this.packOptions.width}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Height</span>\r\n                            <input className=\"properties-input-field\" ref=\"height\" type=\"number\" min=\"0\" onKeyDown={this.onDimChanged}\r\n                                   defaultValue={this.packOptions.height}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Fixed size</span>\r\n                            <label className=\"checkbox-container\">\r\n                                <input type=\"checkbox\" ref=\"fixedSize\"\r\n                                       defaultChecked={this.packOptions.fixedSize ? \"checked\" : \"\"}\r\n                                       onChange={this.toggleChange}/>\r\n                                <span className=\"checkmark\"/>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Power of two</span>\r\n                            <label className=\"checkbox-container\">\r\n                                <input type=\"checkbox\" ref=\"powerOfTwo\" onChange={this.toggleChange}\r\n                                       defaultChecked={this.packOptions.powerOfTwo ? \"checked\" : \"\"}/>\r\n                                <span className=\"checkmark\"/>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Allow Rotation</span>\r\n                            <label className=\"checkbox-container\">\r\n                                <input type=\"checkbox\" ref=\"allowRotation\"\r\n                                       disabled={!this.packOptions.exporter.allowRotation}\r\n                                       onChange={this.toggleChange}\r\n                                       defaultChecked={this.packOptions.allowRotation ? \"checked\" : \"\"}/>\r\n                                <span className=\"checkmark\"/>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Allow Trim</span>\r\n                            <label className=\"checkbox-container\">\r\n                                <input type=\"checkbox\" ref=\"allowTrim\" onChange={this.toggleChange}\r\n                                       disabled={!this.packOptions.exporter.allowTrim}\r\n                                       defaultChecked={this.packOptions.allowTrim ? \"checked\" : \"\"}/>\r\n                                <span className=\"checkmark\"/>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Trim mode</span>\r\n                            <select className=\"properties-input-field\" ref=\"trimmode\">\r\n                                <option value=\"trim\">Trim</option>\r\n                                <option value=\"crop\">Crop</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Detect identical</span>\r\n                            <label className=\"checkbox-container\">\r\n                                <input type=\"checkbox\" ref=\"detectIdentical\" onChange={this.toggleChange}\r\n                                       defaultChecked={this.packOptions.detectIdentical ? \"checked\" : \"\"}/>\r\n                                <span className=\"checkmark\"/>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Packer</span>\r\n                            <select className=\"properties-input-field\" ref=\"packer\" onChange={this.onPackerChange}>\r\n                                {\r\n                                    packers.map(node => {\r\n                                        return (<option key={\"packer-\" + node.type}\r\n                                                        defaultValue={node.type}>{node.type}</option>)\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Method</span>\r\n                            <select className=\"properties-input-field\" ref=\"packerMethod\" onChange={this.toggleChange}\r\n                                    disabled={this.packOptions.packer === \"OptimalPacker\"}>\r\n                                {this.methodItems}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"bg-texture-container\">\r\n                            Background texture\r\n                            <div className=\"bg-texture-container-buttons\">\r\n                                {Textures.map(name => {\r\n                                    return (\r\n                                        <div key={\"bg-texture-\" + name}>\r\n                                            <div\r\n                                                className={\"bg-texture-button \" + name + (this.state.textureBack === name ? \" selected\" : \"\")}\r\n                                                onClick={this.setBack}>&nbsp;</div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bg-texture-container properties-input properties-switch\">\r\n                            <div className=\"properties-switch-op\">One Font</div>\r\n                            <div>\r\n                                <label className=\"switch\">\r\n                                    <input type=\"checkbox\" ref=\"toggleSwitch\" onClick={this.onToggleSwitchChange}/>\r\n                                    <span className=\"slider round\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"properties-switch-op\">Multi Font</div>\r\n                        </div>\r\n                    </div>\r\n                    <div ref=\"tab_font\" className=\"tab-content\">\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">BitmapFont</span>\r\n                            <input className=\"properties-input-field\" ref=\"bmpfSelected\" defaultValue=\"\" readOnly\r\n                                   disabled/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Monospace</span>\r\n                            <label className=\"checkbox-container\">\r\n                                <input type=\"checkbox\" ref=\"monoSpace\" onChange={this.onFontPropChanged}/>\r\n                                <span className=\"checkmark\"/>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Font size</span>\r\n                            <input className=\"properties-input-field\" type=\"number\" ref=\"size\" defaultValue=\"0\"\r\n                                   onChange={this.onFontPropChanged}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Line height</span>\r\n                            <input className=\"properties-input-field\" type=\"number\" ref=\"lineHeight\" defaultValue=\"0\"\r\n                                   onChange={this.onFontPropChanged}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Space width</span>\r\n                            <input className=\"properties-input-field\" type=\"number\" ref=\"spaceWidth\" defaultValue=\"0\"\r\n                                   onChange={this.onFontPropChanged}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Tab width</span>\r\n                            <input className=\"properties-input-field\" type=\"number\" ref=\"tabWidth\" defaultValue=\"0\"\r\n                                   onChange={this.onFontPropChanged}/>\r\n                        </div>\r\n                        <br/>\r\n                        <hr/>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">Selected Char</span>\r\n                            <input className=\"properties-input-field\" ref=\"selectedChar\" defaultValue=\"\" readOnly\r\n                                   disabled/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">ASCII Code</span>\r\n                            <input className=\"properties-input-field\" ref=\"asciiCode\" defaultValue=\"\" readOnly\r\n                                   disabled/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">xoffset</span>\r\n                            <input className=\"properties-input-field\" type=\"number\" ref=\"xOffSet\" defaultValue=\"0\"\r\n                                   onChange={this.onFontPropChanged}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">yoffset</span>\r\n                            <input className=\"properties-input-field\" type=\"number\" ref=\"yOffSet\" defaultValue=\"0\"\r\n                                   onChange={this.onFontPropChanged}/>\r\n                        </div>\r\n                        <div className=\"properties-input\">\r\n                            <span className=\"properties-input-item\">xadvance</span>\r\n                            <input className=\"properties-input-field\" type=\"number\" ref=\"xAdvance\" defaultValue=\"0\"\r\n                                   onChange={this.onFontPropChanged}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <button className=\"app-button\" ref=\"exportButton\" onClick={this.startExport}>EXPORT</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Properties;\r\n\r\n\r\n","import {v4 as uuidv4} from 'uuid';\r\n\r\nclass SpriteSplitter {\r\n    constructor() {\r\n        /**\r\n         * @type {?Array<Object>}\r\n         * @private\r\n         */\r\n        this._listSelections = null;\r\n\r\n        /**\r\n         * @type {Image}\r\n         * @private\r\n         */\r\n        this._img = null;\r\n\r\n        /**\r\n         * @type {?Uint8ClampedArray}\r\n         * @private\r\n         */\r\n        this._rawData = null;\r\n\r\n        /**\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        this._refPixel = null;\r\n\r\n        /**\r\n         * @type {?string}\r\n         * @private\r\n         */\r\n        this._fontName = null;\r\n\r\n        /**\r\n         * @type {HTMLCanvasElement}\r\n         * @private\r\n         */\r\n        this._auxCanvas = document.createElement('canvas');\r\n    }\r\n\r\n    /**\r\n     * @param img\r\n     * @param {string} fontName\r\n     * @returns {?Array<Object>}\r\n     */\r\n    split(img, fontName) {\r\n        this._listSelections = [];\r\n        this._img = img;\r\n        this._fontName = fontName;\r\n\r\n        this._auxCanvas.width = img.width;\r\n        this._auxCanvas.height = img.height;\r\n\r\n        this._auxCanvas.getContext('2d')\r\n            .drawImage(img, 0, 0, img.width, img.height);\r\n        this._rawData = this._auxCanvas.getContext('2d')\r\n            .getImageData(0, 0, img.width, img.height).data;\r\n\r\n        this._refPixel = this.getPixel(0, 0);\r\n\r\n        let next = true;\r\n\r\n        do {\r\n            next = this.selectFrameAt();\r\n        }\r\n        while (next);\r\n\r\n        return this._listSelections;\r\n    }\r\n\r\n    selectFrameAt() {\r\n        let firstPixel = this.findNextStartPixel();\r\n\r\n        if (this.isFinalPixel(firstPixel)) {\r\n            return false;\r\n        }\r\n\r\n        let selection = this.selectFrame(firstPixel);\r\n\r\n        if (selection) {\r\n            //selection.id = Date.now(); // unique identification\r\n            selection.id = uuidv4(); // ToDo make it easier\r\n            selection.fontName = this._fontName;\r\n            selection.imagedata = this._auxCanvas.getContext('2d')\r\n                .getImageData(selection.x, selection.y, selection.width, selection.height);\r\n\r\n            this._listSelections.push(selection);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    selectFrame(firstPixel) {\r\n        let selection = {\r\n            id: 0,\r\n            fontName: '',\r\n            x: firstPixel.x,\r\n            y: firstPixel.y,\r\n            width: 1,\r\n            height: 1,\r\n            imagedata: null\r\n        };\r\n\r\n        this.expandFromPixel(selection);\r\n\r\n        return selection\r\n    }\r\n\r\n    expandFromPixel(selection) {\r\n        let isFinished = false;\r\n\r\n        while (!isFinished) {\r\n            let offset = this.expandFromAllDirections(selection);\r\n\r\n            if (offset === 0) {\r\n                isFinished = true\r\n            }\r\n        }\r\n    }\r\n\r\n    expandFromAllDirections(selection) {\r\n        let offset = 0;\r\n\r\n        offset += this.expandToTheRight(selection);\r\n        offset += this.expandToTheBottom(selection);\r\n        offset += this.expandToTheLeft(selection);\r\n        offset += this.expandToTheTop(selection);\r\n\r\n        return offset\r\n    }\r\n\r\n    expandToTheTop(selection) {\r\n        let offset = 0;\r\n        let isFinished = false;\r\n\r\n        while (!isFinished) {\r\n            if (this.isLineEmptyToTheTop(selection)) {\r\n                isFinished = true;\r\n                break\r\n            }\r\n\r\n            offset += 1;\r\n            selection.y -= 1;\r\n            selection.height += 1;\r\n        }\r\n        return offset\r\n    }\r\n\r\n    isLineEmptyToTheTop(selection) {\r\n        let xToCheck = selection.x;\r\n        let yToCheck = selection.y - 1;\r\n\r\n        if (yToCheck < 0) {\r\n            return true;\r\n        }\r\n\r\n        for (let x = xToCheck, max = (xToCheck + selection.width); x < max; x++) {\r\n            if (!this.isEmptyPixel(this.getPixel(x, yToCheck))) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    expandToTheLeft(selection) {\r\n        let offset = 0;\r\n        let isFinished = false;\r\n\r\n        while (!isFinished) {\r\n            if (this.isLineEmptyToTheLeft(selection)) {\r\n                isFinished = true;\r\n                break\r\n            }\r\n\r\n            offset += 1;\r\n            selection.x -= 1;\r\n            selection.width += 1;\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n    isLineEmptyToTheLeft(selection) {\r\n        let xToCheck = selection.x - 1;\r\n        let yToCheck = selection.y;\r\n\r\n        if (xToCheck < 0) {\r\n            return true;\r\n        }\r\n\r\n        for (let y = yToCheck, max = (yToCheck + selection.height); y < max; y++) {\r\n            if (!this.isEmptyPixel(this.getPixel(xToCheck, y))) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    expandToTheRight(selection) {\r\n        let offset = 0;\r\n        let isFinished = false;\r\n\r\n        while (!isFinished) {\r\n            if (this.isLineEmptyToTheRight(selection)) {\r\n                isFinished = true;\r\n                break\r\n            }\r\n\r\n            offset += 1;\r\n            selection.width += 1;\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n    expandToTheBottom(selection) {\r\n        let offset = 0;\r\n        let isFinished = false;\r\n\r\n        while (!isFinished) {\r\n            if (this.isLineEmptyToTheBottom(selection)) {\r\n                isFinished = true;\r\n                break\r\n            }\r\n            else {\r\n                offset += 1;\r\n                selection.height += 1;\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n    isLineEmptyToTheBottom(selection) {\r\n        let xToCheck = selection.x;\r\n        let yToCheck = selection.y + selection.height;\r\n\r\n        if (yToCheck > this._img.height) {\r\n            return true;\r\n        }\r\n\r\n        for (let x = xToCheck, max = (xToCheck + selection.width); x < max; x++) {\r\n            if (!this.isEmptyPixel(this.getPixel(x, yToCheck))) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    isLineEmptyToTheRight(selection) {\r\n        let xToCheck = selection.x + selection.width;\r\n        let yToCheck = selection.y;\r\n\r\n        if (xToCheck > this._img.width) {\r\n            return true;\r\n        }\r\n\r\n        for (let y = yToCheck, max = (yToCheck + selection.height); y < max; y++) {\r\n            if (!this.isEmptyPixel(this.getPixel(xToCheck, y))) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    getPixel(x, y) {\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            red: this._rawData[(this._img.width * y + x) * 4],\r\n            green: this._rawData[(this._img.width * y + x) * 4 + 1],\r\n            blue: this._rawData[(this._img.width * y + x) * 4 + 2],\r\n            alpha: this._rawData[(this._img.width * y + x) * 4 + 3]\r\n        }\r\n    }\r\n\r\n    isEmptyPixel(targetPixel) {\r\n        return targetPixel.red === this._refPixel.red\r\n            && targetPixel.blue === this._refPixel.blue\r\n            && targetPixel.green === this._refPixel.green\r\n            && targetPixel.alpha === this._refPixel.alpha\r\n    }\r\n\r\n\r\n    findNextStartPixel() {\r\n        return this.searchPixel();\r\n    }\r\n\r\n    isFinalPixel(pixel) {\r\n        return pixel === undefined || (pixel.x === this._img.width - 1 && pixel.y === this._img.height - 1)\r\n    }\r\n\r\n    searchPixel() {\r\n        for (let y = 0, max = this._img.height; y < max; y++) {\r\n            for (let x = 0, maxX = this._img.width; x < maxX; x++) {\r\n                let targetPixel = this.getPixel(x, y);\r\n                if (!this.isEmptyPixel(targetPixel) && !this.isPixelInSelections(this._listSelections, targetPixel)) {\r\n                    //lastPixel = targetPixel;\r\n                    return targetPixel;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isPixelInSelections(selections, pixel) {\r\n        return this.findSelectionOfPixel(selections, pixel).length > 0\r\n    }\r\n\r\n    findSelectionOfPixel(selections, pixel) {\r\n        return selections.filter(function (selection) {\r\n            let minX = selection.x;\r\n            let minY = selection.y;\r\n\r\n            let maxX = selection.x + selection.width;\r\n            let maxY = selection.y + selection.height;\r\n\r\n            if (pixel.x >= minX && pixel.x <= maxX && pixel.y >= minY && pixel.y <= maxY) {\r\n                return selection\r\n            }\r\n            else {\r\n                return false\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default SpriteSplitter;\r\n","class Character\r\n{\r\n    constructor()\r\n    {\r\n        /**\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this._text = '';\r\n\r\n        /**\r\n         * ASCII code\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._code = -1;\r\n\r\n        /**\r\n         * @type {{w: number, x: number, h: number, y: number}}\r\n         * @private\r\n         */\r\n        this._frame = {\r\n            x: 0,\r\n            y: 0,\r\n            w: 0,\r\n            h: 0\r\n        };\r\n\r\n        /**\r\n         * @type {{w: number, h: number}}\r\n         * @private\r\n         */\r\n        this._sourceSize = {\r\n            w: 0,\r\n            h: 0\r\n        };\r\n\r\n        /**\r\n         *\r\n         * @type {{w: number, x: number, h: number, y: number}}\r\n         * @private\r\n         */\r\n        this._spriteSourceSize = {\r\n            x: 0,\r\n            y: 0,\r\n            w: 0,\r\n            h: 0\r\n        };\r\n\r\n        /**\r\n         * @type {HTMLImageElement} HTML Image\r\n         */\r\n        this._image = null;\r\n\r\n        /**\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._rotated = false;\r\n\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._xoffset = 0;\r\n\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._yoffset = 0;\r\n\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._xadvance = 0;\r\n    }\r\n\r\n    set rotated(value)\r\n    {\r\n        this._rotated = value;\r\n    }\r\n\r\n    get rotated()\r\n    {\r\n        return this._rotated;\r\n    }\r\n\r\n    set frame(value)\r\n    {\r\n        this._frame = value;\r\n    }\r\n\r\n    get frame()\r\n    {\r\n        return this._frame;\r\n    }\r\n\r\n    set sourceSize(value)\r\n    {\r\n        this._sourceSize = value;\r\n    }\r\n\r\n    get sourceSize()\r\n    {\r\n        return this._sourceSize;\r\n    }\r\n\r\n    set spriteSourceSize(value)\r\n    {\r\n        this._spriteSourceSize = value;\r\n    }\r\n\r\n    get spriteSourceSize()\r\n    {\r\n        return this._spriteSourceSize;\r\n    }\r\n\r\n    set image(value)\r\n    {\r\n        this._image = value;\r\n    }\r\n\r\n    get image()\r\n    {\r\n        return this._image;\r\n    }\r\n\r\n    set text(value)\r\n    {\r\n        this._text = value;\r\n        this._code = value.charCodeAt(0);\r\n    }\r\n\r\n    get text()\r\n    {\r\n        return this._text;\r\n    }\r\n\r\n    get xadvance()\r\n    {\r\n        return this._xadvance\r\n    }\r\n\r\n    set xadvance(value)\r\n    {\r\n        this._xadvance = value;\r\n    }\r\n\r\n    get xoffset()\r\n    {\r\n        return this._xoffset;\r\n    }\r\n\r\n    set xoffset(value)\r\n    {\r\n        this._xoffset = value;\r\n    }\r\n\r\n    get yoffset()\r\n    {\r\n        return this._yoffset;\r\n    }\r\n\r\n    set yoffset(value)\r\n    {\r\n        this._yoffset = value;\r\n    }\r\n\r\n    get code()\r\n    {\r\n        return this._code;\r\n    }\r\n}\r\n\r\nexport default Character;\r\n","import Character from \"./Character\";\r\nimport EventEmitter from \"eventemitter3\";\r\n\r\nclass BitmapFontData extends EventEmitter {\r\n    constructor(fontName, image) {\r\n        super();\r\n\r\n        /**\r\n         * @type {string} font name\r\n         * @private\r\n         */\r\n        this._name = fontName.split('.')\r\n            .slice(0, -1)\r\n            .join('.');\r\n\r\n        /**\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this._fileName = fontName;\r\n\r\n        /**\r\n         * @type {Image}\r\n         * @private\r\n         */\r\n        this._image = image;\r\n\r\n        /**\r\n         * @type {number} font size\r\n         * @private\r\n         */\r\n        this._size = 0;\r\n\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._lineHeight = 0;\r\n\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._spaceWidth = 0;\r\n\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._tabWidth = 0;\r\n\r\n        /**\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._monospace = false;\r\n\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._monospaceValue = 0;\r\n\r\n        /**\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        this._characters = {};\r\n    }\r\n\r\n    get characters() {\r\n        return this._characters;\r\n    }\r\n\r\n    set characters(value) {\r\n        const len = value.length;\r\n        let i;\r\n        let maxWidth = 0;\r\n        let maxHeight = 0;\r\n\r\n        for (i = 0; i < len; i++) {\r\n            this._characters[value[i].id] = new Character();\r\n\r\n            // default value\r\n            this._characters[value[i].id].xadvance = value[i].width;\r\n\r\n            maxWidth = value[i].width > maxWidth ? value[i].width : maxWidth;\r\n            maxHeight = value[i].height > maxHeight ? value[i].height : maxHeight;\r\n        }\r\n\r\n        this._monospaceValue = maxWidth;\r\n        this._lineHeight = maxHeight;\r\n        this._size = maxHeight;\r\n\r\n        // ToDo default values\r\n        this._spaceWidth = 20;\r\n        this._tabWidth = 30;\r\n    }\r\n\r\n    /**\r\n     * @param charId\r\n     * @returns {null|Character}\r\n     */\r\n    getCharById(charId) {\r\n        let chara = null;\r\n\r\n        if (this._characters.hasOwnProperty(charId)) {\r\n            chara = this._characters[charId];\r\n        }\r\n\r\n        return chara;\r\n    }\r\n\r\n    /**\r\n     * @param text\r\n     * @returns {null|Character}\r\n     */\r\n    getCharByText(text) {\r\n        let chara = null;\r\n\r\n        for (const charId in this._characters) {\r\n            if (this._characters.hasOwnProperty(charId)) {\r\n                if (this._characters[charId].text === text) {\r\n                    chara = this._characters[charId];\r\n                }\r\n            }\r\n        }\r\n\r\n        return chara;\r\n    }\r\n\r\n    setCharMonospace() {\r\n        for (const charId in this._characters) {\r\n            if (this._characters.hasOwnProperty(charId)) {\r\n                this._characters[charId].xoffset = (this._monospaceValue - this._characters[charId].frame.w) / 2.0;\r\n                this._characters[charId].xadvance = this._monospaceValue + (this._monospaceValue - this._characters[charId].frame.w) / 2.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    get spaceWidth() {\r\n        return this._spaceWidth;\r\n    }\r\n\r\n    set spaceWidth(value) {\r\n        this._spaceWidth = value;\r\n    }\r\n\r\n    get tabWidth() {\r\n        return this._tabWidth\r\n    }\r\n\r\n    set tabWidth(value) {\r\n        this._tabWidth = value;\r\n    }\r\n\r\n    get monospace() {\r\n        return this._monospace;\r\n    }\r\n\r\n    set monospace(value) {\r\n        this._monospace = value;\r\n    }\r\n\r\n    get monospaceValue() {\r\n        return this._monospaceValue;\r\n    }\r\n\r\n    set monospaceValue(value) {\r\n        this._monospaceValue = value;\r\n    }\r\n\r\n    get lineHeight() {\r\n        return this._lineHeight;\r\n    }\r\n\r\n    set lineHeight(value) {\r\n        this._lineHeight = value;\r\n    }\r\n\r\n    get size() {\r\n        return this._size;\r\n    }\r\n\r\n    set size(value) {\r\n        this._size = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get fileName() {\r\n        return this._fileName;\r\n    }\r\n}\r\n\r\nexport default BitmapFontData;\r\n","class Trimmer\r\n{\r\n    constructor()\r\n    {\r\n\r\n    }\r\n\r\n    static getAlpha(data, width, x, y)\r\n    {\r\n        return data[((y * (width * 4)) + (x * 4)) + 3];\r\n    }\r\n\r\n    static getLeftSpace(data, width, height, threshold = 0)\r\n    {\r\n        let x;\r\n\r\n        for (x = 0; x < width; x++)\r\n        {\r\n            for (let y = 0; y < height; y++)\r\n            {\r\n                if (this.getAlpha(data, width, x, y) > threshold)\r\n                {\r\n                    return x;\r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    static getRightSpace(data, width, height, threshold = 0)\r\n    {\r\n        let x;\r\n\r\n        for (x = width - 1; x >= 0; x--)\r\n        {\r\n            for (let y = 0; y < height; y++)\r\n            {\r\n                if (this.getAlpha(data, width, x, y) > threshold)\r\n                {\r\n                    return width - x - 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    static getTopSpace(data, width, height, threshold = 0)\r\n    {\r\n        let y;\r\n\r\n        for (y = 0; y < height; y++)\r\n        {\r\n            for (let x = 0; x < width; x++)\r\n            {\r\n                if (this.getAlpha(data, width, x, y) > threshold)\r\n                {\r\n                    return y;\r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    static getBottomSpace(data, width, height, threshold = 0)\r\n    {\r\n        let y;\r\n\r\n        for (y = height - 1; y >= 0; y--)\r\n        {\r\n            for (let x = 0; x < width; x++)\r\n            {\r\n                if (this.getAlpha(data, width, x, y) > threshold)\r\n                {\r\n                    return height - y - 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    static trim(rects, threshold = 0)\r\n    {\r\n        let cns = document.createElement(\"canvas\");\r\n        let ctx = cns.getContext(\"2d\");\r\n\r\n        for (let item of rects)\r\n        {\r\n            let img = item.image;\r\n\r\n            cns.width = img.width;\r\n            cns.height = img.height;\r\n\r\n            ctx.clearRect(0, 0, img.width, img.height);\r\n            ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, img.width, img.height);\r\n\r\n            let data = ctx.getImageData(0, 0, img.width, img.height).data;\r\n            let spaces = {left: 0, right: 0, top: 0, bottom: 0};\r\n\r\n            spaces.left = this.getLeftSpace(data, img.width, img.height, threshold);\r\n            if (spaces.left !== img.width)\r\n            {\r\n                spaces.right = this.getRightSpace(data, img.width, img.height, threshold);\r\n                spaces.top = this.getTopSpace(data, img.width, img.height, threshold);\r\n                spaces.bottom = this.getBottomSpace(data, img.width, img.height, threshold);\r\n\r\n                if (spaces.left > 0 || spaces.right > 0 || spaces.top > 0 || spaces.bottom > 0)\r\n                {\r\n                    item.trimmed = true;\r\n                    item.spriteSourceSize.x = spaces.left;\r\n                    item.spriteSourceSize.y = spaces.top;\r\n                    item.spriteSourceSize.w = img.width - spaces.left - spaces.right;\r\n                    item.spriteSourceSize.h = img.height - spaces.top - spaces.bottom;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                item.trimmed = true;\r\n                item.spriteSourceSize.x = 0;\r\n                item.spriteSourceSize.y = 0;\r\n                item.spriteSourceSize.w = 1;\r\n                item.spriteSourceSize.h = 1;\r\n            }\r\n\r\n            if (item.trimmed)\r\n            {\r\n                item.frame.w = item.spriteSourceSize.w;\r\n                item.frame.h = item.spriteSourceSize.h;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Trimmer;\r\n","class TextureRenderer {\r\n\r\n    constructor(data, options = {}) {\r\n        this._buffer = document.createElement(\"canvas\");\r\n\r\n        this.width = 0;\r\n        this.height = 0;\r\n\r\n        this.render(data, options);\r\n    }\r\n\r\n    static getSize(data, options = {}) {\r\n        let width = options.width || 0;\r\n        let height = options.height || 0;\r\n\r\n        let padding = options.padding || 0;\r\n        let extrude = options.extrude || 0;\r\n\r\n        if (!options.fixedSize) {\r\n            width = 0;\r\n            height = 0;\r\n\r\n            for (let item of data) {\r\n\r\n                let w = item.frame.x + item.frame.w;\r\n                let h = item.frame.y + item.frame.h;\r\n\r\n                if (item.rotated) {\r\n                    w = item.frame.x + item.frame.h;\r\n                    h = item.frame.y + item.frame.w;\r\n                }\r\n\r\n                if (w > width) {\r\n                    width = w;\r\n                }\r\n                if (h > height) {\r\n                    height = h;\r\n                }\r\n            }\r\n\r\n            width += padding + extrude;\r\n            height += padding + extrude;\r\n        }\r\n\r\n        if (options.powerOfTwo) {\r\n            let sw = Math.round(Math.log(width) / Math.log(2));\r\n            let sh = Math.round(Math.log(height) / Math.log(2));\r\n\r\n            let pw = Math.pow(2, sw);\r\n            let ph = Math.pow(2, sh);\r\n\r\n            if (pw < width) {\r\n                pw = Math.pow(2, sw + 1);\r\n            }\r\n            if (ph < height) {\r\n                ph = Math.pow(2, sh + 1);\r\n            }\r\n\r\n            width = pw;\r\n            height = ph;\r\n        }\r\n\r\n        return {width, height};\r\n    }\r\n\r\n    render(data, options = {}) {\r\n        let ctx = this._buffer.getContext(\"2d\");\r\n\r\n        let imageSmoothingEnabled = ctx.imageSmoothingEnabled;\r\n        ctx.imageSmoothingEnabled = !options.disableSmoothing;\r\n\r\n        let {width, height} = TextureRenderer.getSize(data, options);\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n        this._buffer.width = width;\r\n        this._buffer.height = height;\r\n\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        for (let item of data) {\r\n            this.renderItem(ctx, item, options);\r\n        }\r\n\r\n        ctx.imageSmoothingEnabled = imageSmoothingEnabled;\r\n    }\r\n\r\n    scale(val) {\r\n        if (val === 1) {\r\n            return this._buffer;\r\n        }\r\n\r\n        let tempBuffer = document.createElement(\"canvas\");\r\n        tempBuffer.width = Math.round(this._buffer.width * val) || 1;\r\n        tempBuffer.height = Math.round(this._buffer.height * val) || 1;\r\n\r\n        let tempCtx = tempBuffer.getContext(\"2d\");\r\n        tempCtx.drawImage(this._buffer, 0, 0, this._buffer.width, this._buffer.height, 0, 0, tempBuffer.width, tempBuffer.height);\r\n\r\n        return tempBuffer;\r\n    }\r\n\r\n    renderExtrude(ctx, item, options) {\r\n        if (!options.extrude) {\r\n            return;\r\n        }\r\n\r\n        let imageSmoothingEnabled = ctx.imageSmoothingEnabled;\r\n        ctx.imageSmoothingEnabled = false;\r\n\r\n        let dx = item.frame.x;\r\n        let dy = item.frame.y;\r\n\r\n        if (item.rotated) {\r\n            dx = 0;\r\n            dy = 0;\r\n        }\r\n\r\n        let img = item.image;\r\n\r\n        //Draw corners\r\n        ctx.drawImage(img,\r\n            0, 0,\r\n            1, 1,\r\n            dx - options.extrude, dy - options.extrude,\r\n            options.extrude, options.extrude);\r\n\r\n        ctx.drawImage(img,\r\n            0, item.sourceSize.h - 1,\r\n            1, 1,\r\n            dx - options.extrude, dy + item.frame.h,\r\n            options.extrude, options.extrude);\r\n\r\n        ctx.drawImage(img,\r\n            item.sourceSize.w - 1, 0,\r\n            1, 1,\r\n            dx + item.frame.w, dy - options.extrude,\r\n            options.extrude, options.extrude);\r\n\r\n        ctx.drawImage(img,\r\n            item.sourceSize.w - 1, item.sourceSize.h - 1,\r\n            1, 1,\r\n            dx + item.frame.w, dy + item.frame.h,\r\n            options.extrude, options.extrude);\r\n\r\n        //Draw borders\r\n        ctx.drawImage(img,\r\n            0, item.spriteSourceSize.y,\r\n            1, item.spriteSourceSize.h,\r\n            dx - options.extrude, dy,\r\n            options.extrude, item.frame.h);\r\n\r\n        ctx.drawImage(img,\r\n            item.sourceSize.w - 1, item.spriteSourceSize.y,\r\n            1, item.spriteSourceSize.h,\r\n            dx + item.frame.w, dy,\r\n            options.extrude, item.frame.h);\r\n\r\n        ctx.drawImage(img,\r\n            item.spriteSourceSize.x, 0,\r\n            item.spriteSourceSize.w, 1,\r\n            dx, dy - options.extrude,\r\n            item.frame.w, options.extrude);\r\n\r\n        ctx.drawImage(img,\r\n            item.spriteSourceSize.x, item.sourceSize.h - 1,\r\n            item.spriteSourceSize.w, 1,\r\n            dx, dy + item.frame.h,\r\n            item.frame.w, options.extrude);\r\n\r\n        ctx.imageSmoothingEnabled = imageSmoothingEnabled;\r\n    }\r\n\r\n    renderItem(ctx, item, options) {\r\n        if (!item.skipRender) {\r\n\r\n            let img = item.image;\r\n\r\n            if (item.rotated) {\r\n                ctx.save();\r\n                ctx.translate(item.frame.x + item.frame.h, item.frame.y);\r\n\r\n                ctx.rotate(Math.PI / 2);\r\n\r\n                this.renderExtrude(ctx, item, options);\r\n\r\n                ctx.drawImage(img,\r\n                    item.spriteSourceSize.x, item.spriteSourceSize.y,\r\n                    item.spriteSourceSize.w, item.spriteSourceSize.h,\r\n                    0, 0,\r\n                    item.frame.w, item.frame.h);\r\n\r\n                ctx.restore();\r\n            }\r\n            else {\r\n                this.renderExtrude(ctx, item, options);\r\n\r\n                ctx.drawImage(img,\r\n                    item.spriteSourceSize.x, item.spriteSourceSize.y,\r\n                    item.spriteSourceSize.w, item.spriteSourceSize.h,\r\n                    item.frame.x, item.frame.y,\r\n                    item.frame.w, item.frame.h);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    get buffer() {\r\n        return this._buffer;\r\n    }\r\n}\r\n\r\nexport default TextureRenderer;\r\n","import MaxRectsBinPack from './packers/MaxRectsBin';\r\nimport OptimalPacker from './packers/OptimalPacker';\r\nimport allPackers from './packers';\r\nimport Trimmer from \"./Trimmer\";\r\nimport TextureRenderer from '../../utils/TextureRenderer';\r\n\r\n//import I18 from './utils/I18';\r\n\r\nclass PackProcessor\r\n{\r\n    static detectIdentical(rects)\r\n    {\r\n        let identical = [];\r\n\r\n        for (let i = 0; i < rects.length; i++)\r\n        {\r\n            let rect1 = rects[i];\r\n            for (let n = i + 1; n < rects.length; n++)\r\n            {\r\n                let rect2 = rects[n];\r\n                if (rect1.image._base64 === rect2.image._base64 && identical.indexOf(rect2) < 0)\r\n                {\r\n                    rect2.identical = rect1;\r\n                    identical.push(rect2);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let rect of identical)\r\n        {\r\n            rects.splice(rects.indexOf(rect), 1);\r\n        }\r\n\r\n        return {\r\n            rects: rects,\r\n            identical: identical\r\n        }\r\n    }\r\n\r\n    static applyIdentical(rects, identical)\r\n    {\r\n        let clones = [];\r\n        let removeIdentical = [];\r\n\r\n        for (let item of identical)\r\n        {\r\n            let ix = rects.indexOf(item.identical);\r\n            if (ix >= 0)\r\n            {\r\n                let rect = rects[ix];\r\n\r\n                let clone = Object.assign({}, rect);\r\n\r\n                clone.name = item.name;\r\n                clone.image = item.image;\r\n                clone.originalFile = item.file;\r\n                clone.skipRender = true;\r\n\r\n                removeIdentical.push(item);\r\n                clones.push(clone);\r\n            }\r\n        }\r\n\r\n        for (let item of removeIdentical)\r\n        {\r\n            identical.splice(identical.indexOf(item), 1);\r\n        }\r\n\r\n        for (let item of clones)\r\n        {\r\n            item.cloned = true;\r\n            rects.push(item);\r\n        }\r\n\r\n        return rects;\r\n    }\r\n\r\n    static pack(images = {}, options = {}, onComplete = null, onError = null)\r\n    {\r\n        let rects = [];\r\n\r\n        let padding = options.padding || 0;\r\n        let extrude = options.extrude || 0;\r\n\r\n        let maxWidth = 0, maxHeight = 0;\r\n        let minWidth = 0, minHeight = 0;\r\n\r\n        let alphaThreshold = options.alphaThreshold || 0;\r\n        if (alphaThreshold > 255)\r\n        {\r\n            alphaThreshold = 255;\r\n        }\r\n\r\n        let names = Object.keys(images)\r\n            .sort();\r\n\r\n        for (let key of names)\r\n        {\r\n            let img = images[key];\r\n\r\n            maxWidth += img.width;\r\n            maxHeight += img.height;\r\n\r\n            if (img.width > minWidth)\r\n            {\r\n                minWidth = img.width + padding * 2 + extrude * 2;\r\n            }\r\n            if (img.height > minHeight)\r\n            {\r\n                minHeight = img.height + padding * 2 + extrude * 2;\r\n            }\r\n\r\n            rects.push({\r\n                frame: {x: 0, y: 0, w: img.width, h: img.height},\r\n                rotated: false,\r\n                trimmed: false,\r\n                spriteSourceSize: {x: 0, y: 0, w: img.width, h: img.height},\r\n                sourceSize: {w: img.width, h: img.height},\r\n                charId: key,\r\n                file: img._fontName,\r\n                image: img\r\n            });\r\n        }\r\n\r\n        let width = options.width || 0;\r\n        let height = options.height || 0;\r\n\r\n        if (!width)\r\n        {\r\n            width = maxWidth;\r\n        }\r\n        if (!height)\r\n        {\r\n            height = maxHeight;\r\n        }\r\n\r\n        if (options.powerOfTwo)\r\n        {\r\n            let sw = Math.round(Math.log(width) / Math.log(2));\r\n            let sh = Math.round(Math.log(height) / Math.log(2));\r\n\r\n            let pw = Math.pow(2, sw);\r\n            let ph = Math.pow(2, sh);\r\n\r\n            if (pw < width)\r\n            {\r\n                pw = Math.pow(2, sw + 1);\r\n            }\r\n            if (ph < height)\r\n            {\r\n                ph = Math.pow(2, sh + 1);\r\n            }\r\n\r\n            width = pw;\r\n            height = ph;\r\n        }\r\n\r\n        if (width < minWidth || height < minHeight)\r\n        {\r\n            if (onError)\r\n            {\r\n                console.error(\"INVALID_SIZE_ERROR\", minWidth, minHeight);\r\n                onError({\r\n                    //description: I18.f(\"INVALID_SIZE_ERROR\", minWidth, minHeight)\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (options.allowTrim)\r\n        {\r\n            Trimmer.trim(rects, alphaThreshold);\r\n        }\r\n\r\n        for (let item of rects)\r\n        {\r\n            item.frame.w += padding * 2 + extrude * 2;\r\n            item.frame.h += padding * 2 + extrude * 2;\r\n        }\r\n\r\n        let identical = [];\r\n\r\n        if (options.detectIdentical)\r\n        {\r\n            let res = PackProcessor.detectIdentical(rects);\r\n\r\n            rects = res.rects;\r\n            identical = res.identical;\r\n        }\r\n\r\n        let getAllPackers = () =>\r\n        {\r\n            let methods = [];\r\n            for (let packerClass of allPackers)\r\n            {\r\n                if (packerClass !== OptimalPacker)\r\n                {\r\n                    for (let method in packerClass.methods)\r\n                    {\r\n                        methods.push({packerClass, packerMethod: packerClass.methods[method], allowRotation: false});\r\n                        methods.push({packerClass, packerMethod: packerClass.methods[method], allowRotation: true});\r\n                    }\r\n                }\r\n            }\r\n            return methods;\r\n        };\r\n\r\n        let packerClass = options.packer || MaxRectsBinPack;\r\n        let packerMethod = options.packerMethod || MaxRectsBinPack.methods.BestShortSideFit;\r\n        let packerCombos = (packerClass === OptimalPacker) ? getAllPackers() : [{\r\n            packerClass,\r\n            packerMethod,\r\n            allowRotation: options.allowRotation\r\n        }];\r\n\r\n        let optimalRes;\r\n        let optimalSheets = Infinity;\r\n        let optimalEfficiency = 0;\r\n\r\n        let sourceArea = 0;\r\n        for (let rect of rects)\r\n        {\r\n            sourceArea += rect.sourceSize.w * rect.sourceSize.h;\r\n        }\r\n\r\n        for (let combo of packerCombos)\r\n        {\r\n            let res = [];\r\n            let sheetArea = 0;\r\n\r\n            // duplicate rects if more than 1 combo since the array is mutated in pack()\r\n            let _rects = packerCombos.length > 1 ? rects.map(rect =>\r\n            {\r\n                return Object.assign({}, rect, {\r\n                    frame: Object.assign({}, rect.frame),\r\n                    spriteSourceSize: Object.assign({}, rect.spriteSourceSize),\r\n                    sourceSize: Object.assign({}, rect.sourceSize)\r\n                });\r\n            }) : rects;\r\n\r\n            // duplicate identical if more than 1 combo and fix references to point to the\r\n            //  cloned rects since the array is mutated in applyIdentical()\r\n            let _identical = packerCombos.length > 1 ? identical.map(rect =>\r\n            {\r\n                for (let rect2 of _rects)\r\n                {\r\n                    if (rect.identical.image._base64 == rect2.image._base64)\r\n                    {\r\n                        return Object.assign({}, rect, {identical: rect2});\r\n                    }\r\n                }\r\n            }) : identical;\r\n\r\n            while (_rects.length)\r\n            {\r\n                let packer = new combo.packerClass(width, height, combo.allowRotation);\r\n                let result = packer.pack(_rects, combo.packerMethod);\r\n\r\n                for (let item of result)\r\n                {\r\n                    item.frame.x += padding + extrude;\r\n                    item.frame.y += padding + extrude;\r\n                    item.frame.w -= padding * 2 + extrude * 2;\r\n                    item.frame.h -= padding * 2 + extrude * 2;\r\n                }\r\n\r\n                if (options.detectIdentical)\r\n                {\r\n                    result = PackProcessor.applyIdentical(result, _identical);\r\n                }\r\n\r\n                res.push(result);\r\n\r\n                for (let item of result)\r\n                {\r\n                    this.removeRect(_rects, item.charId);\r\n                }\r\n\r\n                let {width: sheetWidth, height: sheetHeight} = TextureRenderer.getSize(result, options);\r\n                sheetArea += sheetWidth * sheetHeight;\r\n            }\r\n\r\n            let sheets = res.length;\r\n            let efficiency = sourceArea / sheetArea;\r\n\r\n            if (sheets < optimalSheets || (sheets === optimalSheets && efficiency > optimalEfficiency))\r\n            {\r\n                optimalRes = res;\r\n                optimalSheets = sheets;\r\n                optimalEfficiency = efficiency;\r\n            }\r\n        }\r\n\r\n        if (onComplete)\r\n        {\r\n            onComplete(optimalRes);\r\n        }\r\n    }\r\n\r\n    static removeRect(rects, charId)\r\n    {\r\n        for (let i = 0; i < rects.length; i++)\r\n        {\r\n            if (rects[i].charId === charId)\r\n            {\r\n                rects.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default PackProcessor;\r\n","import {EVENT, Observer} from \"./utils/Observer\";\n\nimport React, {Component} from 'react';\nimport Header from \"./components/header/Header\";\nimport Viewer from \"./components/main/Viewer\";\nimport AtlasList from \"./components/main/atlas/AtlasList\";\nimport Properties from \"./components/main/Properties\";\nimport SpriteSplitter from \"./utils/SpriteSplitter\";\nimport BitmapFontData from \"./model/BitmapFontData\";\nimport PackProcessor from \"./utils/packing/PackProcessor\";\nimport TextureRenderer from \"./utils/TextureRenderer\";\nimport Exporter from \"./utils/exporter/Export\";\n\nimport './styles/app.css';\n\n//import Tesseract from 'tesseract.js/dist/tesseract.min';\n//import { createWorker } from 'tesseract.js';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        // Bind\n        this.onAtlasListChanged = this.onAtlasListChanged.bind(this);\n        this.onCharImageLoaded = this.onCharImageLoaded.bind(this);\n        this.onPackOptionsChanged = this.onPackOptionsChanged.bind(this);\n        this.startExport = this.startExport.bind(this);\n        this.onFontSelected = this.onFontSelected.bind(this);\n\n        // Data\n        this._bitmapFonts = {};\n\n        // Packing algorithm result\n        this._packResult = null;\n\n        // charas images\n        this._packCharas = null;\n\n        // Packing Options\n        this._packOptions = {};\n\n        // Tools\n        this._spriteSplitter = new SpriteSplitter();\n\n        this._totalCharasToLoad = 0;\n        this._numCharasLoaded = 0;\n\n        this._selectedFont = null;\n\n        // Global Listeners\n        Observer.on(EVENT.ATLAS_LIST_CHANGED, this.onAtlasListChanged);\n        Observer.on(EVENT.PACK_OPTIONS_CHANGED, this.onPackOptionsChanged);\n        Observer.on(EVENT.START_EXPORT, this.startExport);\n        Observer.on(EVENT.FONT_SELECTED, this.onFontSelected);\n    }\n\n    onFontSelected(data) {\n        this._selectedFont = data.selectedFont;\n\n        this._packCharas = this.getImageCharas();\n        this.doPack();\n    }\n\n    onPackOptionsChanged(data) {\n        this._packOptions = data;\n\n        if (data.selectedFont) {\n            this._selectedFont = data.selectedFont;\n        }\n\n        this._packCharas = this.getImageCharas();\n        this.doPack();\n    }\n\n    onAtlasListChanged(data) {\n        let listCharas = [];\n\n        for (const fontName in data) {\n            if (data.hasOwnProperty(fontName)) {\n                const img = data[fontName];\n\n                if (!this._bitmapFonts.hasOwnProperty(fontName)) {\n                    this._bitmapFonts[fontName] = new BitmapFontData(fontName, img);\n\n                    let charas = this._spriteSplitter.split(img, fontName);\n                    this._totalCharasToLoad += charas.length;\n\n                    this._bitmapFonts[fontName].characters = charas;\n                    listCharas = listCharas.concat(charas);\n                }\n            }\n        }\n\n        /// Test Tesseract\n\n        // Tesseract.recognize(\n        //     listCharas[0].imagedata,\n        //     'eng',\n        //     { logger: m => console.log(m) }\n        // ).then(({ data: { text } }) => {\n        //     console.log(text);\n        // });\n\n        // const worker = createWorker({\n        //     logger: m => console.log(m)\n        // });\n        //\n        // (async () => {\n        //     await worker.load();\n        //     await worker.loadLanguage('eng');\n        //     await worker.initialize('eng');\n        //     const { data: { text } } = await worker.recognize(listCharas[0].imagedata);\n        //     console.log(text);\n        //     await worker.terminate();\n        // })();\n\n        ///\n\n        const auxCanvas = document.createElement('canvas');\n        const auxCtx = auxCanvas.getContext('2d');\n\n        const len = listCharas.length;\n        let i;\n\n        for (i = 0; i < len; i++) {\n            auxCanvas.width = listCharas[i].imagedata.width;\n            auxCanvas.height = listCharas[i].imagedata.height;\n\n            auxCtx.putImageData(listCharas[i].imagedata, 0, 0);\n\n            let image = new Image();\n\n            this._bitmapFonts[listCharas[i].fontName].characters[listCharas[i].id].image = image;\n\n            image.addEventListener('load', this.onCharImageLoaded);\n            image._base64 = auxCanvas.toDataURL(); // ToDo\n            image._id = listCharas[i].id;\n            image._fontName = listCharas[i].fontName;\n            image.width = listCharas[i].imagedata.width;\n            image.height = listCharas[i].imagedata.height;\n            image.src = auxCanvas.toDataURL();\n        }\n    }\n\n    onCharImageLoaded(event) {\n        event.target.removeEventListener('load', this.onCharImageLoaded);\n        this._numCharasLoaded++;\n\n        if (this._numCharasLoaded === this._totalCharasToLoad) {\n            this._totalCharasToLoad = 0; // reset\n            this._numCharasLoaded = 0;\n\n            // It's firts load, then, load firts font.\n            if (!this._selectedFont) {\n                this._selectedFont = Object.keys(this._bitmapFonts)[0];\n                this._packOptions.selectedFont = this._selectedFont;\n\n                Observer.emit(EVENT.FONT_SELECTED, {\n                    selectedFont: this._selectedFont\n                })\n            }\n\n            this._packCharas = this.getImageCharas();\n            this.doPack();\n        }\n    }\n\n    getImageCharas() {\n        if (!this._selectedFont) {\n            return;\n        }\n\n        let data = {};\n\n        if (this._packOptions.multiFont) {\n            for (const fontName in this._bitmapFonts) {\n                for (const charId in this._bitmapFonts[fontName].characters) {\n                    if (this._bitmapFonts[fontName].characters.hasOwnProperty(charId)) {\n                        data[charId] = this._bitmapFonts[fontName].characters[charId].image;\n                    }\n                }\n            }\n        }\n        else {\n            for (const charId in this._bitmapFonts[this._selectedFont].characters) {\n                if (this._bitmapFonts[this._selectedFont].characters.hasOwnProperty(charId)) {\n                    data[charId] = this._bitmapFonts[this._selectedFont].characters[charId].image;\n                }\n            }\n        }\n\n        return data;\n    }\n\n    updateBitmapFonts(data) {\n        let i;\n        const len = data.length;\n\n        for (i = 0; i < len; i++) {\n            const fontId = data[i].file;\n            const charId = data[i].charId;\n\n            this._bitmapFonts[fontId].characters[charId].frame.x = data[i].frame.x;\n            this._bitmapFonts[fontId].characters[charId].frame.y = data[i].frame.y;\n            this._bitmapFonts[fontId].characters[charId].frame.w = data[i].frame.w;\n            this._bitmapFonts[fontId].characters[charId].frame.h = data[i].frame.h;\n            this._bitmapFonts[fontId].characters[charId].sourceSize.w = data[i].sourceSize.w;\n            this._bitmapFonts[fontId].characters[charId].sourceSize.h = data[i].sourceSize.h;\n            this._bitmapFonts[fontId].characters[charId].spriteSourceSize.x = data[i].spriteSourceSize.x;\n            this._bitmapFonts[fontId].characters[charId].spriteSourceSize.y = data[i].spriteSourceSize.y;\n            this._bitmapFonts[fontId].characters[charId].spriteSourceSize.w = data[i].spriteSourceSize.w;\n            this._bitmapFonts[fontId].characters[charId].spriteSourceSize.h = data[i].spriteSourceSize.h;\n            this._bitmapFonts[fontId].characters[charId].rotated = data[i].rotated;\n        }\n    }\n\n    doPack() {\n        if (this._packCharas == null) {\n            return;\n        }\n\n        const keys = Object.keys(this._packCharas);\n\n        if (keys.length > 0) {\n            PackProcessor.pack(this._packCharas, this._packOptions, (res) => {\n                this._packResult = [];\n\n                for (let data of res) {\n                    let renderer = new TextureRenderer(data, this._packOptions);\n\n                    this.updateBitmapFonts(data);\n\n                    this._packResult.push({\n                        buffer: renderer.buffer,\n                        renderer: renderer,\n                        multifont: this._packOptions.multiFont,\n                        selectedFont: this._selectedFont\n                    });\n                }\n\n                Observer.emit(EVENT.PACK_COMPLETED, this._packResult);\n\n            }, null);\n        }\n    }\n\n    startExport() {\n        try {\n            let promise = Exporter.startExporter(this._packResult[0].buffer,\n                this._bitmapFonts,\n                this._packOptions);\n        }\n        catch (e) {\n            console.error(\"Error exporting\");\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"app-main\">\n                <div className=\"app-wrapper\">\n                    <Header/>\n                    <div className=\"app-layout\">\n                        <AtlasList/>\n                        <Properties bitmapfonts={this._bitmapFonts}/>\n                        <Viewer bitmapfonts={this._bitmapFonts}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}